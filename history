;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(mu4e~headers-search-hist dired-regexp-history face-name-history read-envvar-name-history Info-search-history counsel-M-x-history minibuffer-history-search-history buffer-name-history lispy-tag-history counsel-git-grep-history string-rectangle-history org--links-history counsel-org-goto-history counsel-descbinds-history org-read-date-history pdf-annot-color-history org-refile-history org-capture--prompt-history read-expression-history org-tags-history minibuffer-history file-name-history swiper-history ivy-history extended-command-history counsel-describe-symbol-history))
(setq mu4e~headers-search-hist '("from:ling" "from:mlhsieh" "to:mmemmew" "from:minglun"))
(setq dired-regexp-history '("djvu$"))
(setq face-name-history '("swiper-line-face" "swiper-match-face-1"))
(setq read-envvar-name-history '("LANG"))
(setq counsel-M-x-history '(#("^" 0 1 (ivy-index 0)) #("^funmo" 0 6 (ivy-index 0)) #("^fund" 0 5 (ivy-index 0)) #("^fundame" 0 8 (ivy-index 0)) #("^fun" 0 4 (ivy-index 0))))
(setq buffer-name-history '("*chercher pdf*"))
(setq counsel-git-grep-history '(#("general-hydra/ exit" 0 19 (ivy-index 3)) #("offer link" 0 10 (ivy-index 2)) #("lispy--not-at-sexp-p" 0 20 (ivy-index 0)) #("define-key" 0 10 (ivy-index 6)) #("special" 0 7 (ivy-index 27)) #("special-lispy" 0 13 (ivy-index 0)) #("hydra set " 0 10 (ivy-index 0)) #("org agen ar def with" 0 20 (ivy-index 2)) #("defun store-link" 0 16 (ivy-index 1)) #("defun org set mode name" 0 23 (ivy-index 0)) #("org insert str" 0 14 (ivy-index 0)) #("org-agenda-type" 0 15 (ivy-index 5)) #("Render.bodies" 0 13 (ivy-index 1)) #("Render.run" 0 10 (ivy-index 0)) #("  ray" 0 5 (ivy-index 0)) #("Shape" 0 5 (ivy-index 0)) #("backgroundColor" 0 15 (ivy-index 0)) #("color" 0 5 (ivy-index 2)) #("webgl render" 0 12 (ivy-index 0))))
(setq string-rectangle-history '(" " "wahaha" "?" "." "libxrml2/" "<esc>" "remove" "-super-" "header" "super-" "-remove" "account" "rfi" "300" "15" "2" "3" "81" "8" "1.75" "1" "0.5"))
(setq counsel-org-goto-history '(#("pdf" 0 3 (ivy-index 0)) #("dét" 0 3 (ivy-index 0))))
(setq counsel-descbinds-history '(#("projcfinddi" 0 11 (ivy-index 1)) #("projecsw" 0 8 (ivy-index 0)) #("register" 0 8 (ivy-index 6)) #("debu" 0 4 (ivy-index 9)) #("org" 0 3 (ivy-index 1)) #("archiv" 0 6 (ivy-index 0)) #("togglearchi" 0 11 (ivy-index 0)) #("dontsend" 0 8 (ivy-index 0)) #("C-x 8" 0 5 (ivy-index 1)) #("C-c C-d" 0 7 (ivy-index 0)) #("mu4esa" 0 6 (ivy-index 0)) #("speciallispy" 0 12 (ivy-index 3)) #("lispyx" 0 6 (ivy-index 1)) #("C-x +" 0 5 (ivy-index 1)) #("<" 0 1 (ivy-index 9)) #("block" 0 5 (ivy-index 1)) #("define" 0 6 (ivy-index 0)) #("C-c C-k" 0 7 (ivy-index 0)) #("," 0 1 (ivy-index 0))))
(setq org-read-date-history '("   " "<2019-02-14 Jeu>    " "3-13,20:00    " "+1,20:00    " "Wed    " "   " "11    " "+    " "+2    " "   " "<2019-02-05 Mar>    " "   " "<2019-02-05 Mar>    " "    " "+    " "20:00    " "+    " "   " "<2019-01-30 Mer>    " "<2019-02-06 Mer>    " "wed    " "   " "28,15:00    " "15:00    " "+    " "   " "sun    " "<2019-01-24 Jeu>    " "   " "<2019-01-22 Mar 21:00>    " "21:00    " "15:00    " "16:00    " "   " "<2019-01-18 Ven 21:00>    " "21:00    " "<2019-01-16 Mer 14:00>    " "16,14:00    " "21:00    " "+    " "+0    " "+    " "4    " "   " "Thu    " "   " "1-25    " "1-4    " "+2    " "+    " "   " "+1    " "+2    "))
(setq org-refile-history '("Étudier le papier par Berger"))
(setq read-expression-history '("(org-cut-subtree)" "(org-archive-subtree)" "(setf cursor-type t)" "cursor-type" "(frame-parameter nil 'cursor-type)" "(org-cut-subtree)" "(make-blank-space t)" "(make-blank-space)" "(frame-parameter nil 'cursor-type)" "(setf debug-on-error nil)" "(org-cut-subtree)" "(org-date 2019 2 15)" "(define-key global-map (kbd \"<f2>\") nil)" "(format \"%s\" (cadr (assoc \"SPC (\" general-hydra/heads)))" "(cadr (assoc \"SPC (\" general-hydra/heads))" "(assoc \"SPC (\" general-hydra/heads)" "(symbol-name (cadar general-hydra/heads))" "(cadar general-hydra/heads)" "(memq company-mode minor-mode-list)" "(memq global-company-mode minor-mode-list)" "(memq company-mode minor-mode-list)" "(message \"hi\")" "(durand-toggle-mode-line -1)" "major-mode" "minibuffer-setup-hook" "(memq 'semantic-mode minor-mode-list)" "(company-mode -1)" "(semantic-mode -1)" "(lispy-mode -1)" "(funcall (cdr (assoc \"ideal.el\" durand-jump-hook-alist)))" "(funcall (cadr (assoc \"ideal.el\" durand-jump-hook-alist)))" "(progn (find-file \"~/.emacs.d/my_packages/ideal/ideal.el\") (goto-char (point-min)) (search-forward \"defhydra\" nil t 2) (forward-line 0) (recenter 0) (general-hydra/body))" "(progn (find-file \"~/.emacs.d/my_packages/ideal/ideal.el\") (search-forward \"defhydra\" nil t 2) (forward-line 0) (recenter 0) (general-hydra/body))" "(recenter 0)" "(forward-line 0)" "(search-forward \"(defhydra\")" "(setf default-directory user-emacs-directory)" "(company-complete)" "(ispell-complete-word)" "(company-complete)" "(setq-local company-backends '(company-capf company-files company-dabbrev))" "(make-variable-buffer-local 'company-backends)" "(company-complete)" "(company-mode 1)" "company-mode" "(company-complete)" "(company-show-location)" "(company-begin-backend 'company-dabbrev)" "(ispell-complete-word)" "(company-begin-backend 'company-dabbrev)" "(setf company-auto-complete nil)" "(company-begin-backend 'company-dabbrev)" "(setf company-auto-complete t)" "(company-begin-backend 'company-dabbrev)" "completion-at-point-functions" "(company-complete)" "(insert 46)" "(insert 41)" "(insert \"%c\" 41)" "(insert ?41)" "? " "(buffer-name)" "(memq 'org-src-mode minor-mode-list)" "major-mode" "(memq 'org-src-mode minor-mode-list)" "(setf cursor-type 'hollow)" "(let ((current-prefix-arg -2)) (cycle-spacing))" "(cycle-spacing 2)" "(cycle-spacing 1)" "(auto-fill-mode 1)" "(browse-url (get-text-property (point) 'shr-url))" "(eval-buffer)" "(setf org-structure-template-alist (nthcdr 4 org-structure-template-alist))" "(setf load-path (cdr load-path))" "load-path" "(org-mime-htmlize)" "(setf debug-on-error t)" "(ispell-complete-word)" "(auto-fill-mode 1)" "(assoc \"S\" general-hydra/heads)" "(fill-region (point-min) (point-max))" "(describe-variable 'general-hydra/heads)" "(describe-variable general-hydra/heads)" "general-hydra/heads" "(assoc \"V\" general-hydra/heads)" "(assoc \"S\" general-hydra/heads)" "(assoc \"SPC s\" general-hydra/heads)" "(assoc \"Z\" general-hydra/heads)" "(assoc \"z\" general-hydra/heads)" "(assoc \"t\" general-hydra/heads)" "(unload-feature 'projectile)" "(unload-feature 'counsel-projectile)" "(unload-feature 'projectile)" "(org-babel-load-file (expand-file-name \"setting.org\" user-emacs-directory))" "(open ./)" "(tool-bar-mode -1)" "(format-time-string \"%N\")" "(display-time-mode -1)" "(display-time-mode 1)" "(format-time-string \"%b\")"))
(setq org-tags-history '(#("password" 0 8 (ivy-index 0)) #("yo" 0 2 (ivy-index 0)) #(":math:catégorie_dérivée:a_voir" 0 30 (ivy-index 0)) #("math:a_voir" 0 11 (ivy-index 0)) #("af" 0 2 (ivy-index 0)) #(":remind:dacon:night" 0 19 (ivy-index 0)) #("remind:dacon" 0 12 (ivy-index 0)) #("emotion" 0 7 (ivy-index 0)) #("ni" 0 2 (ivy-index 0)) #(":emacs:emotion" 0 14 (ivy-index 0)) #("emacs" 0 5 (ivy-index 0)) #(":français:" 0 10 (ivy-index 0)) #("bo" 0 2 (ivy-index 0)) #("boo" 0 3 (ivy-index 0)) #(":français:bookmarks:" 0 20 (ivy-index 0)) #("bookmarks" 0 9 (ivy-index 0)) #(":drive:reminder" 0 15 (ivy-index 0)) #("reminder" 0 8 (ivy-index 0)) #(":math:" 0 6 (ivy-index 0)) #("morning" 0 7 (ivy-index 0)) "idée" #(":cohomologie_étale:math:" 0 24 (ivy-index 0)) #(":math:a_voir:" 0 13 (ivy-index 0)) #(":math:wonderful:a_voir" 0 22 (ivy-index 0)) #("question" 0 8 (ivy-index 0)) #("math" 0 4 (ivy-index 0)) #("remind" 0 6 (ivy-index 0)) #("nght" 0 4 (ivy-index 0)) #("night:remind" 0 12 (ivy-index 0)) #(":afternoon:professeur" 0 21 (ivy-index 0)) #(":web_link:roman" 0 15 (ivy-index 0)) #("math:lcft:" 0 10 (ivy-index 0)) #(":math:de_rham:" 0 14 (ivy-index 0)) #("math:de_rham:cohomologie" 0 24 (ivy-index 0)) #("français:mots" 0 13 (ivy-index 0)) #("formal:professeur:propriétaire" 0 30 (ivy-index 0)) #("math:perrin_riou:iwasawa" 0 24 (ivy-index 0)) #(":afternoon:reminder" 0 19 (ivy-index 0)) #("math:entretien" 0 14 (ivy-index 0)) #("math:catégorie_dérivée" 0 22 (ivy-index 0)) #("a_voir:math:poincaré:" 0 21 (ivy-index 0)) #("grec" 0 4 (ivy-index 0)) #(":cohomologie_étale:math:a_voir" 0 30 (ivy-index 0)) #(":math:p_adic:log:" 0 17 (ivy-index 0)) #("org:elisp" 0 9 (ivy-index 0)) #("math:a_voir:homological_algebra" 0 31 (ivy-index 0)) #("cohomologie_étale:topos:math:a_voir" 0 35 (ivy-index 0)) #("cohomologie_étale:math" 0 22 (ivy-index 0)) #(":cohomologie_étale:a_voir:math" 0 30 (ivy-index 0)) #(":cohomologie_étale:a_voir" 0 25 (ivy-index 0)) #("cohomologie_étale" 0 17 (ivy-index 0)) #(":vélo:rappel" 0 12 (ivy-index 0)) #("vélo" 0 4 (ivy-index 0)) #(":youtube:chanson" 0 16 (ivy-index 0)) #("math:idée" 0 9 (ivy-index 0)) #(":teichmuller:math:" 0 18 (ivy-index 0)) #(":math:cohomologie_crystalline:a_voir" 0 36 (ivy-index 0)) #(":math:cohomologie:a_voir" 0 24 (ivy-index 0)) #(":teichmuller:math:a_voir" 0 24 (ivy-index 0)) #(":math:p_adic:log:a_voir" 0 23 (ivy-index 0)) #(":night:math:" 0 12 (ivy-index 0)) #("math:cohomologie" 0 16 (ivy-index 0)) #(":math:cohomologie_crystalline:" 0 30 (ivy-index 0)) #("math:cohomologie:crystalline" 0 28 (ivy-index 0)) #("aft" 0 3 (ivy-index 0)) #(":afternoon:math" 0 15 (ivy-index 0)) #("afternoon" 0 9 (ivy-index 0)) #("plan" 0 4 (ivy-index 0)) #(":math:zhong_tang" 0 16 (ivy-index 0)) #(":teichmuller:math" 0 17 (ivy-index 0)) #(":teichmuller:" 0 13 (ivy-index 0)) #("avenir" 0 6 (ivy-index 0)) #(":intéressant" 0 12 (ivy-index 0)) #(":" 0 1 (ivy-index 0)) #(":tip:pensée" 0 11 (ivy-index 0)) #("tip" 0 3 (ivy-index 0)) #("intéressant" 0 11 (ivy-index 0)) #("formal:procedure" 0 16 (ivy-index 0)) #("sacha:subscription" 0 18 (ivy-index 0)) #(":école:français:" 0 16 (ivy-index 0)) #("math:wonderful" 0 14 (ivy-index 0)) #(":stack" 0 6 (ivy-index 0)) #("teichmuller" 0 11 (ivy-index 0)) "drill" #("di" 0 2 (ivy-index 0)) "drill" "apprendre" #(":retirer:" 0 9 (ivy-index 0)) #("retirer" 0 7 (ivy-index 0)) #(":mots:" 0 6 (ivy-index 0)) #(":grammaire:" 0 11 (ivy-index 0)) #("liste:mots" 0 10 (ivy-index 0)) #("drill" 0 5 (ivy-index 0)) #(":liste:mots:" 0 12 (ivy-index 0)) #(":liste:mots:drill" 0 17 (ivy-index 0)) #("grammaire:français" 0 18 (ivy-index 0)) #("haskell:mac" 0 11 (ivy-index 0)) #("math:mail:ming_lun" 0 18 (ivy-index 0)) #("emotion:heureux" 0 15 (ivy-index 0)) #("mail" 0 4 (ivy-index 0))))
(setq minibuffer-history '("https://github.com/JSDurand/new-.emacs.d.git" "origin" "scratch.tex" "emacs" "youtube" "scratch.tex" "emacs" "scratch.tex" "custom" "ideal" "[John_H._Hubbard]_Teichmüller_Theory_And_Applicat(b-ok.cc).pdf" "scratch.tex" "emacs" "scratch.tex" "emacs" "{高清中文字幕} MIDE-540 ウチの地味で巨乳な妹が自宅でノーブラ全開で困ってます 水卜さくら - Avgle" "https://avgle.com/video/oZaquqscMq6/高清中文字幕-mide-540-ウチの地味で巨乳な妹が自宅でノーブラ全開で困ってます-水卜さくら" "41" "365" "catégories" "gabriel" "57" "208" "202" "mathematician" "emacs" "{Francis Borceux} Handbook of categorical algebra 2 categories and structures.pdf" "pdfview:/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra 2 categories and structures.pdf::84++0.07" "73" "handbook" "Handbook" "categories" "handbook" "categorical" "handbook" "tohoku" "grothendieck" "NOT maildir:/trash AND NOT maildir:/archive" "台大博士班問題" "emacs" "interview.pdf" "[John_H._Hubbard]_Teichmüller_Theory_And_Applicat(b-ok.cc).pdf" "Désolé ma puce, ça n’existe pas pour les filles ! | Mélissa Plaza | TEDxSaintBrieuc" "file:/Users/durand/org/français/Désolé ma puce, ça n’existe pas pour les filles ! _ Mélissa Plaza _ TEDxSaintBrieuc-waLiGPnNS9E.mkv" "scratch.tex" "twitch channel" "français" "français.org" "ideal" "the code" "dafa" "chezjojo" "conjugaison" "frdic" "reverso dictionnaire" "cambridge dictionnaire" "TV5Monde dictionnaire" "fayufaguo.com" "campus france scholarship website" "rfi DELF examen" "PTT DELF tips" "class field" "untitled" "date:7d..now AND NOT maildir:/trash" "ideal" "design" "=>" "design" "ideal" "<=" "ideal" "design" "ideal" "=>" "ideal" "org" "						" "dix exposés sur la cohomologie des schémas.pdf" "40" "34" "Cohomologie Étale -- Del.Bou.Gro.Ill.pdf" "Q-points and étale cohomology.pdf" "[Tamme_G.]_Introduction_to_Etale_Cohomology(b-ok.cc).pdf" "EGA-IV-IV.pdf" "254" "[Tamme_G.]_Introduction_to_Etale_Cohomology(b-ok.cc).pdf" "pseudo-morphismes dans EGA IV" "121" "270" "EGA-IV-IV" "pdfview:/Users/durand/Desktop/Centre/PDF/En train de lire/EGA/EGA-IV-IV.pdf::270" "270" "ega" "[Tamme_G.]_Introduction_to_Etale_Cohomology(b-ok.cc).pdf" "vanishing" "121" "107" "99" "121" "le lien vers le lemme"))
(setq file-name-history '(#("/Users/durand/.emacs.d/init.el" 0 30 (ivy-index 0)) #("/Users/durand/.emacs.d/setting.org" 0 34 (ivy-index 0)) #("/Users/durand/.emacs.d/semanticdb/" 0 34 (ivy-index 0)) #("/Users/durand/.emacs.d/custom.el" 0 32 (ivy-index 0)) #("/Users/durand/.emacs.d/super-org.el" 0 35 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/ivy-20190212.933/ivy-autoloads.el" 0 61 (ivy-index 0)) #("/Users/durand/org/agenda.org" 0 28 (ivy-index 0)) #("/Users/durand/org/notes.org" 0 27 (ivy-index 0)) #("/Users/durand/Desktop/Centre/Mes notes/Les papiers/jouer/universalMacros.tex" 0 76 (ivy-index 0)) #("/Users/durand/Desktop/Centre/Mes notes/Les papiers/jouer/scratch.pdf" 0 68 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/tex.org" 0 42 (ivy-index 0)) #("/Users/durand/org/aujourdhui.org" 0 32 (ivy-index 0)) #("/Users/durand/Desktop/Centre/Mes notes/Les papiers/NCTS thèse/Report/overconvergent/lecture.tex" 0 95 (ivy-index 16)) #("/Users/durand/Desktop/Centre/Mes notes/Les papiers/NCTS thèse/Report/overconvergent/chapter3.tex" 0 96 (ivy-index 0)) #("/Users/durand/Desktop/Centre/Mes notes/Les papiers/jouer/topologie et cohomologie.tex" 0 85 (ivy-index 2)) #("/Users/durand/.emacs.d/my_packages/tex.el" 0 41 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/tex-complete.el" 0 50 (ivy-index 0)) #("/Users/durand/org/new_post.org" 0 30 (ivy-index 11)) #("/Users/durand/org/français/" 0 27 (ivy-index 0)) #("/Users/durand/Downloads/" 0 24 (ivy-index 0)) #("/Users/durand/org/new_post.html" 0 31 (ivy-index 0)) #("/Users/durand/org/new_post.md" 0 29 (ivy-index 0)) #("/Users/durand/org/" 0 18 (ivy-index 0)) #("/Users/durand/org/new_post.tex" 0 30 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/ideal/xah-fly-keys.el" 0 56 (ivy-index 0)) #("/Users/durand/.emacs.d/projectile-bookmarks.eld" 0 47 (ivy-index 1)) #("/Users/durand/.emacs.d/projectile.cache" 0 39 (ivy-index 0)) #("/Users/durand/.emacs.d/.git/index" 0 33 (ivy-index 1)) #("/Users/durand/.emacs.d/.git/description" 0 39 (ivy-index 0)) #("/Users/durand/.emacs.d/.git/config" 0 34 (ivy-index 0)) #("/Users/durand/.emacs.d/.gitignore" 0 33 (ivy-index 1)) #("/Users/durand/elisp_packages/" 0 29 (ivy-index 0)) #("/Users/durand/" 0 14 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/ideal/" 0 41 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/" 0 35 (ivy-index 0)) #("/Users/durand/.emacs.d/" 0 23 (ivy-index 0)) #("/Users/durand/.emacs.d/nimbus-tex-im-theme.el" 0 45 (ivy-index 0)) #("/Users/durand/Downloads/Des catégories abéliennes par Gabriel.pdf" 0 65 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra basic category theory.pdf" 0 178 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra 2 categories and structures.pdf" 0 184 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra 3 categories of sheaves.pdf" 0 180 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/" 0 103 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux" 0 102 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/" 0 58 (ivy-index 0)) #("/Users/durand/Desktop/" 0 22 (ivy-index 0)) #("/Volumes/For other data/a/" 0 26 (ivy-index 0)) #("/Users/durand/org/emacs-presentation.org" 0 40 (ivy-index 0)) #("/Users/durand/org/français/Désolé ma puce, ça n’existe pas pour les filles ! _ Mélissa Plaza _ TEDxSaintBrieuc-waLiGPnNS9E.mkv" 0 126 (ivy-index 2)) #("/Users/durand/org/français" 0 26 (ivy-index 0)) #("/Users/durand/org/français.org" 0 30 (ivy-index 0)) #("français.org" 0 12 (dirp nil ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/ideal/ideal.el" 0 49 (ivy-index 0)) #("/Users/durand/org/presentation progress.org" 0 43 (ivy-index 0)) "/Applications/Org Protocol Handler.app/Contents/Resources/description.rtfd" "/Applications/Org Protocol Handler.app/Contents/Resources/parse.py" "/Applications/Org Protocol Handler.app/Contents/Info.plist" "/Applications/Org Protocol Handler.app/Contents/Resources/Scripts/main.scpt" #("/Users/durand/org/Capture d’écran 2018-11-14 à 12.35.09.png" 0 59 (ivy-index 0)) #("/Users/durand/.emacs.d/mu-el.el" 0 31 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/src/lisp.h" 0 40 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/src/" 0 34 (ivy-index 0)) #("/Users/durand/Desktop/Capture d’écran 2018-07-29 à 03.26.44.png" 0 63 (ivy-index 4)) #("/Users/durand/w.emacs.d/emacs/src/emacs.c" 0 41 (ivy-index 4)) #("/Volumes/For other data/" 0 24 (ivy-index 1)) #("/Users/durand/Documents/test" 0 28 (ivy-index 0)) #("/Users/durand/Documents/" 0 24 (ivy-index 0)) "//org-protocol:/template=L&url=https/google.com&title=google" #("/Applications/Org Protocol Handler.app/Contents/Resources/parse.py" 0 66 (ivy-index 0)) #("/Users/durand/.emacs.d/cnfonts/" 0 31 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-pkg.el" 0 81 (ivy-index 3)) #("/Users/durand/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-autoloads.el" 0 87 (ivy-index 2)) #("/Users/durand/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode.el" 0 77 (ivy-index 4)) #("/Users/durand/org/notes.org_archive" 0 35 (ivy-index 1)) #("/Users/durand/org/aujourdhui.org_archive" 0 40 (ivy-index 3)) #("/Users/durand/org/diary.org" 0 27 (ivy-index 13)) #("/Users/durand/.emacs.d/my_packages/ideal/ideal-design.org" 0 57 (ivy-index 0)) #("/Users/durand/.emacs.d/novel.el" 0 31 (ivy-index 33)) #("/Users/durand/.emacs.d/recentf" 0 30 (ivy-index 37)) #("/Users/durand/.emacs.d/zoom-frm.el" 0 34 (ivy-index 45)) #("/Users/durand/.emacs.d/setting.org_archive" 0 42 (ivy-index 41)) #("/Users/durand/.emacs.d/cyphejor.el" 0 34 (ivy-index 27)) #("/Users/durand/.emacs.d/amx-items" 0 32 (ivy-index 24)) #("/Users/durand/elisp_packages/ideal/" 0 35 (ivy-index 0)) #("/Users/durand/elisp_packages/ideal/whalala.txt" 0 46 (ivy-index 0)) #("/Users/durand/.emacs.d/sans titre<1>.txt" 0 40 (ivy-index 0)) #("/Users/durand/.emacs.d/org-clock-save.el" 0 40 (ivy-index 0)) #("/Users/durand/.emacs.d/sans titre.txt" 0 37 (ivy-index 0)) #("/Users/durand/Desktop/Centre/TeX/deuxièm texte.tex" 0 50 (ivy-index 2)) #("/Users/durand/.emacs.d/elpa/expand-region-20180817.1134/expand-region-core.el" 0 77 (ivy-index 0)) #("/Users/durand/elisp_packages/durand-keys/" 0 41 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/durand-keys/durand-keys.el" 0 61 (ivy-index 0)) #("/Users/durand/elisp_packages/durand-keys/durand-keys.el" 0 55 (ivy-index 0)) #("/Users/durand/elisp_packages/durand-keys" 0 40 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/src/xml.c" 0 39 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/INSTALL.REPO" 0 42 (ivy-index 1)) #("/Users/durand/Downloads/documents intéressants/Cohomologie/" 0 59 (ivy-index 0)) "~/.emacs.d/custom.el" #("/Users/durand/Downloads/dix exposés sur la cohomologie des schémas.pdf" 0 70 (ivy-index 0)) #("/Users/durand/elisp_packages/ideal/ideal.el" 0 43 (ivy-index 0))))
(setq swiper-history '(#("ivy" 0 3 (ivy-index 19)) #("bu" 0 2 (ivy-index 0)) "bullet" "bullet" "org-bu" #("todo" 0 4 (ivy-index 0)) #("bull" 0 4 (ivy-index 0)) #("transpose" 0 9 (ivy-index 7)) "trouve" #("make blank space" 0 16 (ivy-index 0)) #("spc n\"" 0 6 (ivy-index 0)) #("durand-open-line" 0 16 (ivy-index 0)) #("\"n\"" 0 3 (ivy-index 0)) #("cursor-type" 0 11 (ivy-index 2)) #("cursor" 0 6 (ivy-index 0)) #("\"spc j\"" 0 7 (ivy-index 0)) "\"j\"" #("org-agenda-jump-to-item" 0 23 (ivy-index 0)) #("\"a\"" 0 3 (ivy-index 0)) #("durand custom mode line" 0 23 (ivy-index 1)) #("cycle-sp" 0 8 (ivy-index 0)) #("\"z\"" 0 3 (ivy-index 0)) "base" #("du se ge" 0 8 (ivy-index 12)) #("defin" 0 5 (ivy-index 0)) #("\"G\"" 0 3 (ivy-index 0)) #("global com" 0 10 (ivy-index 1)) "curso" #("hbox" 0 4 (ivy-index 0)) #("verbo" 0 5 (ivy-index 0)) #("jump hook alist" 0 15 (ivy-index 1)) "mode line" "mode line" #("toggle mode line" 0 16 (ivy-index 3)) #("mini" 0 4 (ivy-index 0)) #("company-mode" 0 12 (ivy-index 0)) #("cus" 0 3 (ivy-index 0)) #("comp" 0 4 (ivy-index 3)) #("alist" 0 5 (ivy-index 0)) #("jum alist" 0 9 (ivy-index 2)) #("dur book jump" 0 13 (ivy-index 2)) #("lispy" 0 5 (ivy-index 0)) #("hook" 0 4 (ivy-index 1)) #("com mode" 0 8 (ivy-index 4)) #("front" 0 5 (ivy-index 0)) "align" "show" #("limit" 0 5 (ivy-index 0)) #("compa" 0 5 (ivy-index 2)) #("custom mode line" 0 16 (ivy-index 1)) #("insert-" 0 7 (ivy-index 10)) #("company" 0 7 (ivy-index 0)) #("begin-comm" 0 10 (ivy-index 0)) #("comple" 0 6 (ivy-index 6)) "recour" #("recourvrement" 0 13 (ivy-index 0)) "complete" "re_search_2" #("search_buffer" 0 13 (ivy-index 3)) "make_number" "Qnil" "Qsearch_failed" "point after end" #("search_command" 0 14 (ivy-index 0)) #("check" 0 5 (ivy-index 2)) #("defun company clang" 0 19 (ivy-index 14)) #("get-def" 0 7 (ivy-index 0)) #("vers" 0 4 (ivy-index 0)) #("edit-spe" 0 8 (ivy-index 0)) #("spc '" 0 5 (ivy-index 0)) #("edit-sp" 0 7 (ivy-index 0)) #("condition-case" 0 14 (ivy-index 2)) #("edi" 0 3 (ivy-index 9)) #("edit" 0 4 (ivy-index 8)) #(",a nd" 0 5 (ivy-index 0)) #("defhy" 0 5 (ivy-index 3)) #("insert-h" 0 8 (ivy-index 6)) #("jou" 0 3 (ivy-index 0)) #("advice" 0 6 (ivy-index 1)) "add to list" "use-" #("org" 0 3 (ivy-index 7)) #("tex" 0 3 (ivy-index 0)) #("consider" 0 8 (ivy-index 0)) "reveal" "reveal" "org reveal" #("\"spc" 0 4 (ivy-index 9)) "cycle-spac" #("cycle" 0 5 (ivy-index 0)) #("cyc" 0 3 (ivy-index 0)) "cap sen" #("\"'\"" 0 3 (ivy-index 0)) #("fill" 0 4 (ivy-index 0)) #("gene kill" 0 9 (ivy-index 0)) "url" #("coho" 0 4 (ivy-index 0)) #("\"M" 0 2 (ivy-index 0)) #("co ta" 0 5 (ivy-index 4)) "cohom"))
(setq ivy-history '(#("^" 0 1 (ivy-index 0)) #("^sa" 0 3 (ivy-index 0)) "◯" "(org-cut-subtree)" #("^o c" 0 4 (ivy-index 0)) #("^n" 0 2 (ivy-index 0)) "cambridge dictionnaire" #("^sc" 0 3 (ivy-index 0)) #("^e" 0 2 (ivy-index 0)) #("ca" 0 2 (ivy-index 0)) #("^i" 0 2 (ivy-index 0)) #("[2019-02-15 Ven 11:45]" 0 22 (ivy-index 0)) #("re" 0 2 (ivy-index 0)) #("tei" 0 3 (ivy-index 0)) #("^h" 0 2 (ivy-index 0)) #("a" 0 1 (ivy-index 1)) #("S" 0 1 (ivy-index 1)) "durand-cycle-cases" "downcase-region-or-word" "upcase-region-or-word" "k              previous-line" #("spre" 0 4 (ivy-index 0)) "SPC (" "cambridge dictionnaire" #("genehea" 0 7 (ivy-index 0)) #("mino" 0 4 (ivy-index 0)) #("^top" 0 4 (ivy-index 0)) #("pdf-canum" 0 9 (ivy-index 0)) #("pdf-view-cu" 0 11 (ivy-index 0)) #("^se" 0 3 (ivy-index 0)) #("^c" 0 2 (ivy-index 0)) "*Backtrace*" #("^a" 0 2 (ivy-index 0)) #("^w" 0 2 (ivy-index 0)) "*Help*" #("define-key" 0 10 (ivy-index 0)) #("defin" 0 5 (ivy-index 1)) #("home" 0 4 (ivy-index 0)) #("^g" 0 2 (ivy-index 0)) #("b" 0 1 (ivy-index 0)) "*Messages*" #("mes" 0 3 (ivy-index 0)) #("^s" 0 2 (ivy-index 0)) "sans titre<1>" "*Org Src setting.org[ emacs-lisp ]*" #("ispell-compl" 0 12 (ivy-index 0)) #("^set" 0 4 (ivy-index 0)) #("company-auto" 0 12 (ivy-index 0)) #("companycom" 0 10 (ivy-index 0)) #("he" 0 2 (ivy-index 0)) #("minor-mode" 0 10 (ivy-index 0)) "test/manual/etags/cp-src/functions.cpp" "~/w.emacs.d/emacs/" #("m" 0 1 (ivy-index 0)) #("brow" 0 4 (ivy-index 4)) #("user-em" 0 7 (ivy-index 0)) #("oxp" 0 3 (ivy-index 0)) #("org" 0 3 (ivy-index 0)) #("/" 0 1 (ivy-index 0)) #("oxre" 0 4 (ivy-index 0)) #("c" 0 1 (ivy-index 0)) #("s" 0 1 (ivy-index 0)) #("ispell-com" 0 10 (ivy-index 1)) #("^d" 0 2 (ivy-index 0)) "*ivy-occur swiper \"coho\"*" #("\"" 0 1 (ivy-index 0)) "(defun durand-meta-buffer-p (name)
  \"Determine whether the buffer is meta or not\"
  (interactive)
  (and (buffer-live-p (get-buffer name))
       (or (= 42 (aref name 0)) ;; 42 => *
           (= 32 (aref name 0)) ;; 32 => space
           (with-current-buffer name
             (derived-mode-p 'magit-mode 'dired-mode 'eww-mode 'mu4e-view-mode 'mu4e-main-mode
                             'mu4e-headers-mode 'mu4e-compose-mode 'mu4e-org-mode
                             'mu4e~update-mail-mode 'elfeed-show-mode 'elfeed-search-mode)))))" #("=" 0 1 (ivy-index 0)) "novel-checker" "~/.emacs.d/scripts/" ".projectile" #("sc" 0 2 (ivy-index 0)) "net-parser/src/Main.hs" #("da" 0 2 (ivy-index 1)) #("my" 0 2 (ivy-index 1)) "functionalities/musiques/pick.hs" "~/control/" "~/" #("ideal" 0 5 (ivy-index 0)) "~/" #("mpmusic" 0 7 (ivy-index 0)) #("idea" 0 4 (ivy-index 0)) "~/control/" #("^f" 0 2 (ivy-index 0)) "(defun durand-self-insert-complete-and-exit ()
  \"Taken from headlong file.
Insert the character you type and try to complete.
If this results in one candidate, then immediately exit the minibuffer with the default action.\"
  (interactive)
  (when durand-headlong
    (let ((candidates-length (safe-length (ivy--filter ivy-text (ivy-state-collection ivy-last))))
	  (cur-action (cadadr (ivy-state-action ivy-last))))
      (cond
       ((eq 1 candidates-length)
	(if durand-changed-p
	    (ivy-exit-with-action cur-action)
	  (setq durand-changed-p t)))
       (t (setq durand-changed-p t))))))" #("durand-bookmark-jump-headlong" 0 29 (fontified t)) #("*" 0 1 (ivy-index 0)) #("-" 0 1 (ivy-index 0)) "(defun durand-general-kill (&optional direction unit no-kill-p)
  \"General function for killing.
In mu4e-headers-mode, execute `mu4e-headers-mark-for-delete'.
In org-agenda-mode, execute `org-agenda-kill'.
In dired-mode,execute `dired-do-delete'.
If the region is active, then delete or kill the region according to NO-KILL-P.
Otherwise, it behaves according to UNIT.
If UNIT is character, then it deletes or kills the character that follows or precedes the point.
If UNIT is word, then do the same for words.
If UNIT is end, DIRECTION is forward, and if lispy-mode is on, then execute `lispy-kill';
else deletes or kills to the end or the beginning of the visual line.
If UNIT is char-or-brackets, then delete or kill the entire bracket near point, if the cursor is near a bracket;
with current-prefix-arg, only deletes or kills the brackets;
if point not near a bracket, then delete or kill a character.\"
  (interactive)
  (pcase major-mode
    ('mu4e-headers-mode
     (mu4e-headers-mark-for-delete))
    ((guard (derived-mode-p 'org-agenda-mode))
     (org-agenda-kill))
    ((guard (derived-mode-p 'dired-mode))
     (dired-do-delete current-prefix-arg))
    ((guard (use-region-p))
     (if no-kill-p
         (delete-region (region-beginning) (region-end))
       (kill-region (region-beginning) (region-end) t)))
    (_
     (let* ((direction (or direction 'forward))
            (unit (or unit 'character))
            (direction-factor (pcase direction
                                ('forward 1)
                                ('backward -1)
                                (_ (user-error \"Unknown direction: %s\" direction))))
            (kill-function (if no-kill-p 'delete-region 'kill-region)))
       (pcase unit
         ('character
          (let* ((p1 (point))
                 (p2 (+ (point) direction-factor))
                 (beg (min p1 p2))
                 (end (max p1 p2)))
            (funcall kill-function beg end)))
         ('word
          (pcase direction
            ('forward
             (funcall kill-function (point) (progn (forward-word 1) (point))))
            ('backward
             (funcall kill-function (point) (progn (forward-word -1) (point))))))
         ('end
          (pcase direction
            ('forward
             (if (memq 'lispy-mode minor-mode-list)
                 (lispy-kill)
               (funcall kill-function (point) (max (1+ (point)) (save-excursion
                                                                  (end-of-visual-line)
                                                                  (point))))))
            ('backward
             (funcall kill-function
                      (min (1- (point)) (save-excursion (end-of-visual-line) (point)))
                      (point)))))
         ('char-or-bracket
          (pcase direction-factor
            (1 (cond
                ((or
                  (looking-at \"\\\\s(\")
                  (and (looking-at \"\\\\s\\\"\") (not (nth 3 (syntax-ppss)))))
                 (if (null current-prefix-arg)
                     (funcall kill-function (point) (save-excursion (forward-sexp 1) (point)))
                   (save-excursion
                     (forward-sexp 1)
                     (funcall kill-function (1- (point)) (point)))
                   (funcall kill-function (point) (1+ (point)))))
                ((looking-at \"\\\\s)\")
                 (if (null current-prefix-arg)
                     (progn
                       (forward-char 1)
                       (funcall kill-function
                                (save-excursion (backward-sexp 1)
                                                (point))
                                (point)))
                   (save-excursion
                     (forward-char 1)
                     (backward-sexp 1)
                     (funcall kill-function (point) (1+ (point))))
                   (funcall kill-function (point) (1+ (point)))))
                (t
                 (durand-general-kill 'forward 'character no-kill-p))))
            (-1 (cond
                 ((or
                   (looking-back \"\\\\s)\" 1)
                   (and (looking-back \"\\\\s\\\"\" 1) (not (nth 3 (syntax-ppss)))))
                  (if (null current-prefix-arg)
                      (funcall kill-function (save-excursion (forward-sexp -1) (point)) (point))
                    (save-excursion
                      (forward-sexp -1)
                      (funcall kill-function (point) (1+ (point))))
                    (funcall kill-function (1- (point)) (point))))
                 ((looking-back \"\\\\s(\" 1)
                  (if (null current-prefix-arg)
                      (progn
                        (forward-char -1)
                        (funcall kill-function
                                 (point)
                                 (save-excursion (forward-sexp 1) (point))))
                    (save-excursion
                      (forward-char -1)
                      (forward-sexp 1)
                      (funcall kill-function (1- (point)) (point)))
                    (funcall kill-function (1- (point)) (point))))
                 (t
                  (durand-general-kill 'backward 'character no-kill-p))))))
         (_
          (user-error \"Killing for %s not implemented yet\" unit)))))))" "(defun durand-general-kill (&optional direction unit no-kill-p)
  \"General function for killing; prefer deleting region.\"
  (interactive)
  (pcase major-mode
    ('mu4e-headers-mode
     (mu4e-headers-mark-for-delete))
    ((guard (derived-mode-p 'org-agenda-mode))
     (org-agenda-kill))
    ((guard (derived-mode-p 'dired-mode))
     (dired-do-delete current-prefix-arg))
    ((guard (use-region-p))
     (if no-kill-p
         (delete-region (region-beginning) (region-end))
       (kill-region (region-beginning) (region-end) t)))
    (_
     (let* ((direction (or direction 'forward))
            (unit (or unit 'character))
            (direction-factor (pcase direction
                                ('forward 1)
                                ('backward -1)
                                (_ (user-error \"Unknown direction: %s\" direction))))
            (kill-function (if no-kill-p 'delete-region 'kill-region)))
       (pcase unit
         ('character
          (let* ((p1 (point))
                 (p2 (+ (point) direction-factor))
                 (beg (min p1 p2))
                 (end (max p1 p2)))
            (funcall kill-function beg end)))
         ('word
          (pcase direction
            ('forward
             (funcall kill-function (point) (progn (forward-word 1) (point))))
            ('backward
             (funcall kill-function (point) (progn (forward-word -1) (point))))))
         ('end
          (pcase direction
            ('forward
             (if (memq 'lispy-mode minor-mode-list)
                 (lispy-kill)
               (funcall kill-function (point) (max (1+ (point)) (line-end-position)))))
            ('backward
             (funcall kill-function (min (1- (point)) (line-beginning-position)) (point)))))
         ('char-or-bracket
          (pcase direction-factor
            (1 (cond
                ((or
                  (looking-at \"\\\\s(\")
                  (and (looking-at \"\\\\s\\\"\") (not (nth 3 (syntax-ppss)))))
                 (if (null current-prefix-arg)
                     (funcall kill-function (point) (save-excursion (forward-sexp 1) (point)))
                   (save-excursion
                     (forward-sexp 1)
                     (funcall kill-function (1- (point)) (point)))
                   (funcall kill-function (point) (1+ (point)))))
                ((looking-at \"\\\\s)\")
                 (if (null current-prefix-arg)
                     (progn
                       (forward-char 1)
                       (funcall kill-function
                                (save-excursion (backward-sexp 1)
                                                (point))
                                (point)))
                   (save-excursion
                     (forward-char 1)
                     (backward-sexp 1)
                     (funcall kill-function (point) (1+ (point))))
                   (funcall kill-function (point) (1+ (point)))))
                (t
                 (durand-general-kill 'forward 'character no-kill-p))))
            (-1 (cond
                 ((or
                   (looking-back \"\\\\s)\" 1)
                   (and (looking-back \"\\\\s\\\"\" 1) (not (nth 3 (syntax-ppss)))))
                  (if (null current-prefix-arg)
                      (funcall kill-function (save-excursion (forward-sexp -1) (point)) (point))
                    (save-excursion
                      (forward-sexp -1)
                      (funcall kill-function (point) (1+ (point))))
                    (funcall kill-function (1- (point)) (point))))
                 ((looking-back \"\\\\s(\" 1)
                  (if (null current-prefix-arg)
                      (progn
                        (forward-char -1)
                        (funcall kill-function
                                 (point)
                                 (save-excursion (forward-sexp 1) (point))))
                    (save-excursion
                      (forward-char -1)
                      (forward-sexp 1)
                      (funcall kill-function (1- (point)) (point)))
                    (funcall kill-function (1- (point)) (point))))
                 (t
                  (durand-general-kill 'backward 'character no-kill-p))))))
         (_
          (user-error \"Killing for %s not implemented yet\" unit)))))))" #("最新章" 0 3 (ivy-index 1)) "*Help*" "*chercher pdf*" "*eshell*" "custom.el" #("org-mime" 0 8 (ivy-index 1)) "(defun durand-buffer-scroll (&optional direction n other-p)
  \"Scroll buffer\"
  (let* ((direction (or direction 'up))
         (scroll-function (pcase direction
                            ('up '(
                                   :normal scroll-up
                                   :other-window scroll-other-window
                                   :pdf pdf-view-scroll-up-or-next-page
                                   :agenda org-agenda-next-block))
                            ('down '(
                                     :normal scroll-down
                                     :other-window scroll-other-window-down
                                     :pdf pdf-view-scroll-down-or-previous-page
                                     :agenda org-agenda-previous-block))
                            (_ (user-error \"Invalid direction %s\" direction)))))
    (condition-case err
        (cond
         (other-p
          (funcall (plist-get scroll-function :other-window) n))
         ((string= major-mode \"pdf-view-mode\")
          (funcall (plist-get scroll-function :pdf) n))
         ((string= major-mode \"org-agenda-mode\")
          (funcall (plist-get scroll-function :agenda) n))
         (t
          (funcall (plist-get scroll-function :normal) n)))
      ((user-error error) (pcase (cdr err)
                            ((pred null)
                             (message \"%s\" (car err)))
                            (_
                             (message \"%s: %s\" (car err) (cdr err))))))
    (general-hydra/body)))" #("with-current-" 0 13 (ivy-index 1)) "mpv --no-terminal --autofit=100%x100% --no-border --geometry=+0+-24 $*"))
(setq extended-command-history '("org-mode" "emacs-lisp-mode" #("elispmode" 0 9 (ivy-index 1)) "org-mode" "fundamental-mode" #("fnmode" 0 6 (ivy-index 1)) #("orgmode" 0 7 (ivy-index 0)) #("aufimo" 0 6 (ivy-index 0)) #("orgmdex" 0 7 (ivy-index 1)) "org-export-dispatch" "load-library" "org-export-dispatch" "org-mode" "fundamental-mode" "org-export-dispatch" #("loadli" 0 6 (ivy-index 0)) "org-export-dispatch" #("orgepdi" 0 7 (ivy-index 0)) #("packlipa" 0 8 (ivy-index 0)) #("liscod" 0 6 (ivy-index 0)) #("orgagju" 0 7 (ivy-index 1)) #("platex" 0 6 (ivy-index 0)) #("rain" 0 4 (ivy-index 0)) "durand-chercher-pdf" #("auto" 0 4 (ivy-index 3)) "durand-chercher-pdf" "emacs-lisp-mode" "fundamental-mode" #("emacsli" 0 7 (ivy-index 0)) "fundamental-mode" #("duchpdf" 0 7 (ivy-index 0)) "describe-function" #("describefun" 0 11 (ivy-index 0)) #("evalex" 0 6 (ivy-index 0)) "describe-function" #("descrfun" 0 8 (ivy-index 0)) #("sort" 0 4 (ivy-index 0)) "fundamental-mode" #("evalregion" 0 10 (ivy-index 0)) "durand-copy-line-or-region" #("duclo" 0 5 (ivy-index 0)) "align-regexp" #("align" 0 5 (ivy-index 1)) #("macro" 0 5 (ivy-index 1)) #("emlimode" 0 8 (ivy-index 0)) "org-mode" "eval-expression" #("oliv" 0 4 (ivy-index 0)) #("kiem" 0 4 (ivy-index 0)) #("packlis" 0 7 (ivy-index 0)) #("packin" 0 6 (ivy-index 0)) "durand-chercher-pdf" "fundamental-mode" "kill-emacs" #("killemacs" 0 9 (ivy-index 0)) "name-last-kbd-macro" "edit-kbd-macro" "test" "edit-kbd-macro" "name-last-kbd-macro" #("kbdmacro" 0 8 (ivy-index 10)) "edit-kbd-macro" "name-last-kbd-macro" "edit-kbd-macro" #("name" 0 4 (ivy-index 0)) "durand-chercher-pdf" #("test" 0 4 (ivy-index 0)) "emacs-lisp-mode" #("durand-chercher-" 0 16 (ivy-index 0)) "test/body" #("testbo" 0 6 (ivy-index 0)) "macrostep-expand" #("macroe" 0 6 (ivy-index 0)) "eval-expression" #("evalexp" 0 7 (ivy-index 0)) "durand-chercher-musique" "durand-sign" #("eww" 0 3 (ivy-index 0)) "durand-sign" #("cologmo" 0 7 (ivy-index 1)) #("commandlog" 0 10 (ivy-index 0)) "durand-sign" "durand-chercher-pdf" "durand-sign" "durand-chercher-musique" "durand-sign" "olivetti-mode" #("lispin" 0 6 (ivy-index 2)) "durand-sign" "durand-chercher-musique" "durand-chercher-pdf" "durand-chercher-musique" "olivetti-mode" #("plain" 0 5 (ivy-index 0)) #("olive" 0 5 (ivy-index 0)) "durand-chercher-musique" #("ptt" 0 3 (ivy-index 0)) "durand-chercher-musique" "durand-chercher-pdf" "fundamental-mode"))
(setq counsel-describe-symbol-history '(#("^orgmoh" 0 7 (ivy-index 0)) #("^" 0 1 (ivy-index 2443)) #("^load" 0 5 (ivy-index 0)) #("^drnwf" 0 6 (ivy-index 0)) #("^lof" 0 4 (ivy-index 2)) #("^interac" 0 8 (ivy-index 0)) #("^makeblank" 0 10 (ivy-index 0)) #("^curtype" 0 8 (ivy-index 0)) #("framepara" 0 9 (ivy-index 5)) #("^orgdate" 0 8 (ivy-index 0)) #("^ivyrebui" 0 9 (ivy-index 0)) #("^genehyhe" 0 9 (ivy-index 0)) #("pretty" 0 6 (ivy-index 0)) #("prettylis" 0 9 (ivy-index 0)) #("^curty" 0 6 (ivy-index 0)) #("^pdfvihook" 0 10 (ivy-index 0)) #("^texfirstpdf" 0 12 (ivy-index 0)) #("^elismoh" 0 8 (ivy-index 0)) #("^comtoomax" 0 10 (ivy-index 0)) #("^combaends" 0 10 (ivy-index 0)) #("^addhook" 0 8 (ivy-index 0)) #("^comatpo" 0 8 (ivy-index 0)) #("^setqlocal" 0 10 (ivy-index 0)) #("^comidle" 0 8 (ivy-index 0)) #("^orgself" 0 8 (ivy-index 0)) #("^combecom" 0 9 (ivy-index 0)) #("^comdel" 0 7 (ivy-index 2)) #("^comtoli" 0 8 (ivy-index 0)) #("^comfron" 0 8 (ivy-index 0)) #("^comwrap" 0 8 (ivy-index 0)) #("^comcy" 0 6 (ivy-index 0)) #("^comtngcon" 0 10 (ivy-index 0)) #("^comtr" 0 6 (ivy-index 0)) #("^comloca" 0 8 (ivy-index 0)) #("^comb" 0 5 (ivy-index 1)) #("^compbac" 0 8 (ivy-index 1)) #("^comyas" 0 7 (ivy-index 0)) #("^resfo" 0 6 (ivy-index 0)) #("^comclan" 0 8 (ivy-index 0)) #("^comrema" 0 8 (ivy-index 0)) #("^complcoorc" 0 11 (ivy-index 0)) #("^comaucom" 0 9 (ivy-index 0)) #("^combackend" 0 11 (ivy-index 1)) #("^companyauto" 0 12 (ivy-index 0)) #("^comba" 0 6 (ivy-index 2)) #("^complc" 0 7 (ivy-index 0)) #("^runhow" 0 7 (ivy-index 0)) #("^defvlu" 0 7 (ivy-index 0)) #("^clletf" 0 7 (ivy-index 2)) #("^pcase" 0 6 (ivy-index 0)) #("^clcase" 0 7 (ivy-index 0)) #("^orgedsp" 0 8 (ivy-index 1)) #("^painp" 0 6 (ivy-index 0)) #("^curt" 0 5 (ivy-index 0)) #("^orgstotr" 0 9 (ivy-index 0)) #("^orgtoli" 0 8 (ivy-index 0)) #("orgtempo" 0 8 (ivy-index 1)) #("tomarkdown" 0 10 (ivy-index 0)) #("htmliz" 0 6 (ivy-index 0)) #("^orgver" 0 7 (ivy-index 1)) #("^ispcomw" 0 8 (ivy-index 0)) #("^cycsp" 0 6 (ivy-index 0)) #("^cyspa" 0 6 (ivy-index 1)) #("^adadd" 0 6 (ivy-index 1)) #("^cyadvi" 0 7 (ivy-index 0)) #("^fill" 0 5 (ivy-index 2)) #("^fillpara" 0 9 (ivy-index 0)) #("^orgagjum" 0 9 (ivy-index 1)) #("^yasexpa" 0 8 (ivy-index 0)) #("^hydrauni" 0 9 (ivy-index 0)) #("^hyrepeat" 0 9 (ivy-index 0)) #("^unargum" 0 8 (ivy-index 0)) #("^dumep" 0 6 (ivy-index 0)) #("^selfins" 0 8 (ivy-index 0)) #("^projecfind" 0 11 (ivy-index 0)) #("^projec" 0 7 (ivy-index 2)) #("^proge" 0 6 (ivy-index 0)) #("^prorep" 0 7 (ivy-index 0)) #("^dugek" 0 6 (ivy-index 0)) #("^dushoc" 0 7 (ivy-index 0)) #("^fortistr" 0 9 (ivy-index 0)) #("^withtempbuw" 0 12 (ivy-index 0)) #("^dufol" 0 6 (ivy-index 0)) #("^fort" 0 5 (ivy-index 0)) #("jumptono" 0 8 (ivy-index 0)) #("^duchpdf" 0 8 (ivy-index 0)) #("pdfdir" 0 6 (ivy-index 0)) #("^companyda" 0 10 (ivy-index 0)) #("^ghhe" 0 5 (ivy-index 0)) #("^withbuffer" 0 11 (ivy-index 4)) #("^descri" 0 7 (ivy-index 0)) #("^remove" 0 7 (ivy-index 0)) #("^orgfap" 0 7 (ivy-index 0)) #("^orglink" 0 8 (ivy-index 1)) #("^mblank" 0 7 (ivy-index 0)) #("^tgov" 0 5 (ivy-index 0)) #("^toubn" 0 6 (ivy-index 0)) #("^ghyhe" 0 6 (ivy-index 0)) #("^aufi" 0 5 (ivy-index 0)) #("^ivyimme" 0 8 (ivy-index 0))))
(setq tablist-named-filter 'nil)
(setq org-drill-sm5-optimal-factor-matrix '((4 (2.8000000000000003 . 2.794)) (3 (2.8000000000000003 . 2.785) (2.7 . 2.691)) (2 (2.46 . 2.443) (2.5 . 2.5) (2.7 . 2.679) (2.6 . 2.588)) (1 (2.36 . 3.86) (1.96 . 3.58) (2.1799999999999997 . 3.72) (2.5 . 4.0) (2.6 . 4.14) (1.7000000000000002 . 3.44))))
