;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(mu4e~headers-search-hist dired-regexp-history face-name-history read-envvar-name-history Info-search-history counsel-M-x-history minibuffer-history-search-history buffer-name-history lispy-tag-history counsel-git-grep-history string-rectangle-history org--links-history counsel-org-goto-history counsel-descbinds-history org-read-date-history pdf-annot-color-history org-refile-history org-capture--prompt-history read-expression-history org-tags-history minibuffer-history file-name-history swiper-history ivy-history extended-command-history counsel-describe-symbol-history))
(setq mu4e~headers-search-hist '("from:ling" "from:mlhsieh" "to:mmemmew" "from:minglun"))
(setq dired-regexp-history '("djvu$"))
(setq face-name-history '("swiper-line-face" "swiper-match-face-1"))
(setq read-envvar-name-history '("LANG"))
(setq counsel-M-x-history '(#("^" 0 1 (ivy-index 0)) #("^funmo" 0 6 (ivy-index 0)) #("^fund" 0 5 (ivy-index 0)) #("^fundame" 0 8 (ivy-index 0)) #("^fun" 0 4 (ivy-index 0))))
(setq buffer-name-history '("*chercher pdf*"))
(setq counsel-git-grep-history '(#("general-hydra/ exit" 0 19 (ivy-index 3)) #("offer link" 0 10 (ivy-index 2)) #("lispy--not-at-sexp-p" 0 20 (ivy-index 0)) #("define-key" 0 10 (ivy-index 6)) #("special" 0 7 (ivy-index 27)) #("special-lispy" 0 13 (ivy-index 0)) #("hydra set " 0 10 (ivy-index 0)) #("org agen ar def with" 0 20 (ivy-index 2)) #("defun store-link" 0 16 (ivy-index 1)) #("defun org set mode name" 0 23 (ivy-index 0)) #("org insert str" 0 14 (ivy-index 0)) #("org-agenda-type" 0 15 (ivy-index 5)) #("Render.bodies" 0 13 (ivy-index 1)) #("Render.run" 0 10 (ivy-index 0)) #("  ray" 0 5 (ivy-index 0)) #("Shape" 0 5 (ivy-index 0)) #("backgroundColor" 0 15 (ivy-index 0)) #("color" 0 5 (ivy-index 2)) #("webgl render" 0 12 (ivy-index 0))))
(setq string-rectangle-history '(" " "wahaha" "?" "." "libxrml2/" "<esc>" "remove" "-super-" "header" "super-" "-remove" "account" "rfi" "300" "15" "2" "3" "81" "8" "1.75" "1" "0.5"))
(setq counsel-org-goto-history '(#("pdf" 0 3 (ivy-index 0)) #("dét" 0 3 (ivy-index 0))))
(setq counsel-descbinds-history '(#("register" 0 8 (ivy-index 6)) #("debu" 0 4 (ivy-index 9)) #("org" 0 3 (ivy-index 1)) #("archiv" 0 6 (ivy-index 0)) #("togglearchi" 0 11 (ivy-index 0)) #("dontsend" 0 8 (ivy-index 0)) #("C-x 8" 0 5 (ivy-index 1)) #("C-c C-d" 0 7 (ivy-index 0)) #("mu4esa" 0 6 (ivy-index 0)) #("speciallispy" 0 12 (ivy-index 3)) #("lispyx" 0 6 (ivy-index 1)) #("C-x +" 0 5 (ivy-index 1)) #("<" 0 1 (ivy-index 9)) #("block" 0 5 (ivy-index 1)) #("define" 0 6 (ivy-index 0)) #("C-c C-k" 0 7 (ivy-index 0)) #("," 0 1 (ivy-index 0))))
(setq org-read-date-history '("+1,20:00    " "Wed    " "   " "11    " "+    " "+2    " "   " "<2019-02-05 Mar>    " "   " "<2019-02-05 Mar>    " "    " "+    " "20:00    " "+    " "   " "<2019-01-30 Mer>    " "<2019-02-06 Mer>    " "wed    " "   " "28,15:00    " "15:00    " "+    " "   " "sun    " "<2019-01-24 Jeu>    " "   " "<2019-01-22 Mar 21:00>    " "21:00    " "15:00    " "16:00    " "   " "<2019-01-18 Ven 21:00>    " "21:00    " "<2019-01-16 Mer 14:00>    " "16,14:00    " "21:00    " "+    " "+0    " "+    " "4    " "   " "Thu    " "   " "1-25    " "1-4    " "+2    " "+    " "   " "+1    " "+2    "))
(setq org-refile-history '("Étudier le papier par Berger"))
(setq org-capture--prompt-history '(#("1490" 0 4 (ivy-index 0)) #("150" 0 3 (ivy-index 0)) #("55" 0 2 (ivy-index 0)) "0" #("103" 0 3 (ivy-index 0)) #("121" 0 3 (ivy-index 0)) #("65" 0 2 (ivy-index 0)) #("170" 0 3 (ivy-index 0)) #("70" 0 2 (ivy-index 0)) #("160" 0 3 (ivy-index 0)) #("75" 0 2 (ivy-index 0)) #("120" 0 3 (ivy-index 0)) #("110" 0 3 (ivy-index 0)) #("198" 0 3 (ivy-index 0)) #("95" 0 2 (ivy-index 0)) #("90" 0 2 (ivy-index 0)) #("63" 0 2 (ivy-index 0)) #("80" 0 2 (ivy-index 0)) #("157" 0 3 (ivy-index 0)) #("45" 0 2 (ivy-index 0)) #("29" 0 2 (ivy-index 0)) #("50" 0 2 (ivy-index 0)) #("100" 0 3 (ivy-index 0)) #("85" 0 2 (ivy-index 0)) #("69" 0 2 (ivy-index 0)) #("26" 0 2 (ivy-index 0)) #("180" 0 3 (ivy-index 0)) #("130" 0 3 (ivy-index 0)) #("60" 0 2 (ivy-index 0)) #("53" 0 2 (ivy-index 0)) #("48" 0 2 (ivy-index 0)) #("175" 0 3 (ivy-index 0))))
(setq read-expression-history '("(org-babel-load-file (expand-file-name \"setting.org\" user-emacs-directory))" "(open ./)" "(tool-bar-mode -1)" "(format-time-string \"%N\")" "(display-time-mode -1)" "(display-time-mode 1)" "(format-time-string \"%b\")" "(format-time-string \"%a\")" "(org-agenda-jump-to-novels)" "(wdired-change-to-wdired-mode)" "(make-process :name \"chercher\" :buffer \"*chercher pdf*\" :sentinel 'ignore :command '(\"rg\" \"--files\" \"--no-messages\" \"--follow\" \"--iglob\" \"*handbook*\" \"/Users/durand/Downloads\"))" "(org-mime-htmlize)" "(browse-url (get-text-property (point) 'shr-url))" "(get-text-property (point) 'mu4e-url)" "(browse-url (get-text-property (point) 'mu4e-url))" "(eval-buffer)" "(hl-line-mode -1)" "(hl-line-mode 1)" "(org-cut-subtree)" "(with-current-buffer-window \"test\" nil nil (message \"hi\"))" "durand-tex-action" "(tex-display-or-kill-temp-buffer)" "(current-fill-column)" "auto-fill-mode" "olivetti-mode" "(mu4e-mark-execute-all)" "durand-tex-action" "(- (save-excursion (forward-sexp 1) (point)) (point))" "(save-excursion (let ((res 0)) (while (/= (point) (point-max)) (if (looking-at \";;\") (forward-line 1) (incf res (- (line-end-position) (line-beginning-position))) (forward-line 1))) res))" "(save-excursion (let ((res 0)) (while (/= (point) (point-max)) (if (looking-at \";;\") (forward-line 1) (incf res (count-words (line-beginning-position) (line-end-position))) (forward-line 1))) res))" "(save-excursion (let ((res 0)) (while (/= (point) (point-max)) (if (looking-at \";;\") (forward-line 1) (incf res (- (line-end-position) (line-beginning-position))) (forward-line 1))) res))" "(save-excursion (let ((res 0)) (while (/= (point) (point-max)) (if (looking-at \";;\") (forward-line 1) (incf res (count-words (line-beginning-position) (line-end-position))) (forward-line 1))) res))" "(save-excursion (let ((res 0)) (while (/= (point) (point-max)) (if (looking-at \";;\") (forward-line 1) (incf res (- (line-end-position) (line-beginning-position))) (forward-line 1))) res))" "(auto-fill-mode 1)" "(org-archive-subtree)" "(kill-new (format \"%s\" major-mode))" "major-mode" "(eval-buffer)" "(current-message)" "(current-message-" "(kbd \"<wheel-down>\")" "major-mode" "(org-open-bookmarks)" "(goto-char 14876)" "(org-open-bookmarks)" "(goto-char 14713)" "(org-open-bookmarks)" "(org-make-link-string \"frdic\" \"frdic\")" "(org-make-link-string \"\" \"frdic\")" "(org-open-bookmarks)" "(insert (format \"%s\" (org-open-bookmarks)))" "(insert (org-open-bookmarks))" "(org-open-bookmarks)" "(progn (string-match org-any-link-re \"[[https://google.com][google]]\") (match-string 3 \"[[https://google.com][google]]\"))" "(progn (string-match org-any-link-re \"[[https://google.com][google]]\") (match-string 2 \"[[https://google.com][google]]\"))" "(progn (string-match org-any-link-re \"[[https://google.com][google]]\") (match-string 1 \"[[https://google.com][google]]\"))" "(progn (string-match org-any-link-re \"[[https://google.com][google]]\") (match-string 0 \"[[https://google.com][google]]\"))" "(string-match org-any-link-re \"[[https://google.com][google]]\")" "(org-element-property :path \"[[https://google.com][google]]\")" "(org-element-property :type \"[[https://google.com][google]]\")" "(insert (format \"%s\" (org-ql--query \"~/org/notes.org\" '(tags \"bookmarks\")
                             :action (lambda ()
                                       (org-offer-links-in-entry (buffer-name) (point))))))" "(insert (org-ql--query \"~/org/notes.org\" '(tags \"bookmarks\")
                             :action (lambda ()
                                       (org-offer-links-in-entry (buffer-name) (point)))))" "(insert (mapconcat #'identity (org-ql--query \"~/org/notes.org\" '(tags \"bookmarks\")
                             :action (lambda ()
                                       (org-offer-links-in-entry (buffer-name) (point)))) \"\\n\"))" "(org-ql--query \"~/org/notes.org\" '(tags \"bookmarks\")
                             :action (lambda ()
                                       (org-offer-links-in-entry (buffer-name) (point))))" "(org-ql--query \"~/org/notes.org\" '(tags \"bookmarks\")
                             :action (lambda ()
                                       (let ((element (cadr (org-element-headline-parser (line-end-position)))))
                                         (plist-get element :raw-value))))" "(org-ql--query \"~/org/notes.org\" '(tags \"bookmarks\"))" "(org-ql--query \"notes.org\" '(tags \"bookmarks\"))" "(org-ql--query \"notes.org\" (tags \"bookmarks\"))" "(org-ql--query \"notes.org\" \"tags bookmarks\")" "(org-ql--query \"notes.org\" \"tags \\\\\"bookmarks\\\\\"\")" "(setf default-directory user-emacs-directory)" "(one-window-p)" "(frame-list)" "(xwidget-webkit-browse-url \"http://facebook.com\")" "(xwidget-webkit-browse-url \"http://facebook.com)" "(xwidget-webkit-browse-url \"http://google.com\")" "(emacs-uptime)" "(kill-emacs)" "(xwidget-webkit-browse-url \"http://google.com\")" "(setf browse-url-browser-function 'xwidget-webkit-browse-url)" "(kill-emacs)" "(setf (buffer-substring (point) (point)) \"h\")" "(eval-buffer)" "(kill-emacs)" "(global-command-log-mode -1)" "(new-frame)" "(clm/open-command-log-buffer)" "(global-command-log-mode)" "(new-frame)" "(global-command-log-mode -1)" "(global-command-log-mode)" "(clm/open-command-log-buffer)" "(split-window)" "(org-archive-subtree)" "(length durand-recently-closed-files)" "(cdr nil)" "(let ((var '(\"a\" \"b\" \"c\"))) (setcdr (nthcdr 1 var) nil) var)" "(let ((var '(\"a\" \"b\" \"c\"))) (setcdr (nthcdr 2 var) nil) var)" "(setcdr (nthcdr 2 '(\"a\" \"b\" \"c\")) nil)" "(setf (nthcdr 2 (\"a\" \"b\" \"c\" \"d\" \"e\")) '(\"a\"))"))
(setq org-tags-history '(#(":math:catégorie_dérivée:a_voir" 0 30 (ivy-index 0)) #("math:a_voir" 0 11 (ivy-index 0)) #("af" 0 2 (ivy-index 0)) #(":remind:dacon:night" 0 19 (ivy-index 0)) #("remind:dacon" 0 12 (ivy-index 0)) #("emotion" 0 7 (ivy-index 0)) #("ni" 0 2 (ivy-index 0)) #(":emacs:emotion" 0 14 (ivy-index 0)) #("emacs" 0 5 (ivy-index 0)) #(":français:" 0 10 (ivy-index 0)) #("bo" 0 2 (ivy-index 0)) #("boo" 0 3 (ivy-index 0)) #(":français:bookmarks:" 0 20 (ivy-index 0)) #("bookmarks" 0 9 (ivy-index 0)) #(":drive:reminder" 0 15 (ivy-index 0)) #("reminder" 0 8 (ivy-index 0)) #(":math:" 0 6 (ivy-index 0)) #("morning" 0 7 (ivy-index 0)) "idée" #(":cohomologie_étale:math:" 0 24 (ivy-index 0)) #(":math:a_voir:" 0 13 (ivy-index 0)) #(":math:wonderful:a_voir" 0 22 (ivy-index 0)) #("question" 0 8 (ivy-index 0)) #("math" 0 4 (ivy-index 0)) #("remind" 0 6 (ivy-index 0)) #("nght" 0 4 (ivy-index 0)) #("night:remind" 0 12 (ivy-index 0)) #(":afternoon:professeur" 0 21 (ivy-index 0)) #(":web_link:roman" 0 15 (ivy-index 0)) #("math:lcft:" 0 10 (ivy-index 0)) #(":math:de_rham:" 0 14 (ivy-index 0)) #("math:de_rham:cohomologie" 0 24 (ivy-index 0)) #("français:mots" 0 13 (ivy-index 0)) #("formal:professeur:propriétaire" 0 30 (ivy-index 0)) #("math:perrin_riou:iwasawa" 0 24 (ivy-index 0)) #(":afternoon:reminder" 0 19 (ivy-index 0)) #("math:entretien" 0 14 (ivy-index 0)) #("math:catégorie_dérivée" 0 22 (ivy-index 0)) #("a_voir:math:poincaré:" 0 21 (ivy-index 0)) #("grec" 0 4 (ivy-index 0)) #(":cohomologie_étale:math:a_voir" 0 30 (ivy-index 0)) #(":math:p_adic:log:" 0 17 (ivy-index 0)) #("org:elisp" 0 9 (ivy-index 0)) #("math:a_voir:homological_algebra" 0 31 (ivy-index 0)) #("cohomologie_étale:topos:math:a_voir" 0 35 (ivy-index 0)) #("cohomologie_étale:math" 0 22 (ivy-index 0)) #(":cohomologie_étale:a_voir:math" 0 30 (ivy-index 0)) #(":cohomologie_étale:a_voir" 0 25 (ivy-index 0)) #("cohomologie_étale" 0 17 (ivy-index 0)) #(":vélo:rappel" 0 12 (ivy-index 0)) #("vélo" 0 4 (ivy-index 0)) #(":youtube:chanson" 0 16 (ivy-index 0)) #("math:idée" 0 9 (ivy-index 0)) #(":teichmuller:math:" 0 18 (ivy-index 0)) #(":math:cohomologie_crystalline:a_voir" 0 36 (ivy-index 0)) #(":math:cohomologie:a_voir" 0 24 (ivy-index 0)) #(":teichmuller:math:a_voir" 0 24 (ivy-index 0)) #(":math:p_adic:log:a_voir" 0 23 (ivy-index 0)) #(":night:math:" 0 12 (ivy-index 0)) #("math:cohomologie" 0 16 (ivy-index 0)) #(":math:cohomologie_crystalline:" 0 30 (ivy-index 0)) #("math:cohomologie:crystalline" 0 28 (ivy-index 0)) #("aft" 0 3 (ivy-index 0)) #(":afternoon:math" 0 15 (ivy-index 0)) #("afternoon" 0 9 (ivy-index 0)) #("plan" 0 4 (ivy-index 0)) #(":math:zhong_tang" 0 16 (ivy-index 0)) #(":teichmuller:math" 0 17 (ivy-index 0)) #(":teichmuller:" 0 13 (ivy-index 0)) #("avenir" 0 6 (ivy-index 0)) #(":intéressant" 0 12 (ivy-index 0)) #(":" 0 1 (ivy-index 0)) #(":tip:pensée" 0 11 (ivy-index 0)) #("tip" 0 3 (ivy-index 0)) #("intéressant" 0 11 (ivy-index 0)) #("formal:procedure" 0 16 (ivy-index 0)) #("sacha:subscription" 0 18 (ivy-index 0)) #(":école:français:" 0 16 (ivy-index 0)) #("math:wonderful" 0 14 (ivy-index 0)) #(":stack" 0 6 (ivy-index 0)) #("teichmuller" 0 11 (ivy-index 0)) "drill" #("di" 0 2 (ivy-index 0)) "drill" "apprendre" #(":retirer:" 0 9 (ivy-index 0)) #("retirer" 0 7 (ivy-index 0)) #(":mots:" 0 6 (ivy-index 0)) #(":grammaire:" 0 11 (ivy-index 0)) #("liste:mots" 0 10 (ivy-index 0)) #("drill" 0 5 (ivy-index 0)) #(":liste:mots:" 0 12 (ivy-index 0)) #(":liste:mots:drill" 0 17 (ivy-index 0)) #("grammaire:français" 0 18 (ivy-index 0)) #("haskell:mac" 0 11 (ivy-index 0)) #("math:mail:ming_lun" 0 18 (ivy-index 0)) #("emotion:heureux" 0 15 (ivy-index 0)) #("mail" 0 4 (ivy-index 0)) #("prime:function_field" 0 20 (ivy-index 0)) #("fr" 0 2 (ivy-index 0))))
(setq minibuffer-history '("41" "365" "catégories" "gabriel" "57" "208" "202" "mathematician" "emacs" "{Francis Borceux} Handbook of categorical algebra 2 categories and structures.pdf" "pdfview:/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra 2 categories and structures.pdf::84++0.07" "73" "handbook" "Handbook" "categories" "handbook" "categorical" "handbook" "tohoku" "grothendieck" "NOT maildir:/trash AND NOT maildir:/archive" "台大博士班問題" "emacs" "interview.pdf" "[John_H._Hubbard]_Teichmüller_Theory_And_Applicat(b-ok.cc).pdf" "Désolé ma puce, ça n’existe pas pour les filles ! | Mélissa Plaza | TEDxSaintBrieuc" "file:/Users/durand/org/français/Désolé ma puce, ça n’existe pas pour les filles ! _ Mélissa Plaza _ TEDxSaintBrieuc-waLiGPnNS9E.mkv" "scratch.tex" "twitch channel" "français" "français.org" "ideal" "the code" "dafa" "chezjojo" "conjugaison" "frdic" "reverso dictionnaire" "cambridge dictionnaire" "TV5Monde dictionnaire" "fayufaguo.com" "campus france scholarship website" "rfi DELF examen" "PTT DELF tips" "class field" "untitled" "date:7d..now AND NOT maildir:/trash" "ideal" "design" "=>" "design" "ideal" "<=" "ideal" "design" "ideal" "=>" "ideal" "org" "						" "dix exposés sur la cohomologie des schémas.pdf" "40" "34" "Cohomologie Étale -- Del.Bou.Gro.Ill.pdf" "Q-points and étale cohomology.pdf" "[Tamme_G.]_Introduction_to_Etale_Cohomology(b-ok.cc).pdf" "EGA-IV-IV.pdf" "254" "[Tamme_G.]_Introduction_to_Etale_Cohomology(b-ok.cc).pdf" "pseudo-morphismes dans EGA IV" "121" "270" "EGA-IV-IV" "pdfview:/Users/durand/Desktop/Centre/PDF/En train de lire/EGA/EGA-IV-IV.pdf::270" "270" "ega" "[Tamme_G.]_Introduction_to_Etale_Cohomology(b-ok.cc).pdf" "vanishing" "121" "107" "99" "121" "le lien vers le lemme" "270" "253" "liu" "120" "36" "97" "21" "45" "120" "34" "120" "t" "te" "120" "134" "120" "35"))
(setq file-name-history '(#("/Users/durand/.emacs.d/custom.el" 0 32 (ivy-index 0)) #("/Users/durand/.emacs.d/setting.org" 0 34 (ivy-index 0)) #("/Users/durand/.emacs.d/nimbus-tex-im-theme.el" 0 45 (ivy-index 0)) #("/Users/durand/Downloads/Des catégories abéliennes par Gabriel.pdf" 0 65 (ivy-index 0)) #("/Users/durand/Downloads/" 0 24 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra basic category theory.pdf" 0 178 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra 2 categories and structures.pdf" 0 184 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/[Francis Borceux] Handbook of categorical algebra 3 categories of sheaves.pdf" 0 180 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux/" 0 103 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/Handbook of categorical algebra by F.Borceux" 0 102 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/" 0 58 (ivy-index 0)) #("/Users/durand/Desktop/" 0 22 (ivy-index 0)) #("/Users/durand/org/français/" 0 27 (ivy-index 0)) #("/Volumes/For other data/a/" 0 26 (ivy-index 0)) #("/Users/durand/org/emacs-presentation.org" 0 40 (ivy-index 0)) #("/Users/durand/org/français/Désolé ma puce, ça n’existe pas pour les filles ! _ Mélissa Plaza _ TEDxSaintBrieuc-waLiGPnNS9E.mkv" 0 126 (ivy-index 2)) #("/Users/durand/.emacs.d/my_packages/tex.org" 0 42 (ivy-index 0)) #("/Users/durand/org/français" 0 26 (ivy-index 0)) #("/Users/durand/org/français.org" 0 30 (ivy-index 0)) #("français.org" 0 12 (dirp nil ivy-index 0)) #("/Users/durand/org/" 0 18 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/ideal/ideal.el" 0 49 (ivy-index 0)) #("/Users/durand/org/presentation progress.org" 0 43 (ivy-index 0)) #("/Users/durand/org/notes.org" 0 27 (ivy-index 0)) "/Applications/Org Protocol Handler.app/Contents/Resources/description.rtfd" "/Applications/Org Protocol Handler.app/Contents/Resources/parse.py" "/Applications/Org Protocol Handler.app/Contents/Info.plist" "/Applications/Org Protocol Handler.app/Contents/Resources/Scripts/main.scpt" #("/Users/durand/org/Capture d’écran 2018-11-14 à 12.35.09.png" 0 59 (ivy-index 0)) #("/Users/durand/.emacs.d/mu-el.el" 0 31 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/src/lisp.h" 0 40 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/src/" 0 34 (ivy-index 0)) #("/Users/durand/Desktop/Capture d’écran 2018-07-29 à 03.26.44.png" 0 63 (ivy-index 4)) #("/Users/durand/w.emacs.d/emacs/src/emacs.c" 0 41 (ivy-index 4)) #("/Volumes/For other data/" 0 24 (ivy-index 1)) #("/Users/durand/.emacs.d/my_packages/" 0 35 (ivy-index 0)) #("/Users/durand/Documents/test" 0 28 (ivy-index 0)) #("/Users/durand/Documents/" 0 24 (ivy-index 0)) #("/Users/durand/.emacs.d/super-org.el" 0 35 (ivy-index 0)) "//org-protocol:/template=L&url=https/google.com&title=google" #("/Applications/Org Protocol Handler.app/Contents/Resources/parse.py" 0 66 (ivy-index 0)) #("/Users/durand/.emacs.d/cnfonts/" 0 31 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/ideal/xah-fly-keys.el" 0 56 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-pkg.el" 0 81 (ivy-index 3)) #("/Users/durand/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-autoloads.el" 0 87 (ivy-index 2)) #("/Users/durand/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode.el" 0 77 (ivy-index 4)) #("/Users/durand/org/notes.org_archive" 0 35 (ivy-index 1)) #("/Users/durand/org/aujourdhui.org_archive" 0 40 (ivy-index 3)) #("/Users/durand/org/aujourdhui.org" 0 32 (ivy-index 10)) #("/Users/durand/org/diary.org" 0 27 (ivy-index 13)) #("/Users/durand/.emacs.d/my_packages/ideal/ideal-design.org" 0 57 (ivy-index 0)) #("/Users/durand/.emacs.d/novel.el" 0 31 (ivy-index 33)) #("/Users/durand/.emacs.d/recentf" 0 30 (ivy-index 37)) #("/Users/durand/.emacs.d/zoom-frm.el" 0 34 (ivy-index 45)) #("/Users/durand/.emacs.d/setting.org_archive" 0 42 (ivy-index 41)) #("/Users/durand/.emacs.d/cyphejor.el" 0 34 (ivy-index 27)) #("/Users/durand/.emacs.d/amx-items" 0 32 (ivy-index 24)) #("/Users/durand/elisp_packages/ideal/" 0 35 (ivy-index 0)) #("/Users/durand/elisp_packages/ideal/whalala.txt" 0 46 (ivy-index 0)) #("/Users/durand/.emacs.d/" 0 23 (ivy-index 0)) #("/Users/durand/.emacs.d/sans titre<1>.txt" 0 40 (ivy-index 0)) #("/Users/durand/.emacs.d/org-clock-save.el" 0 40 (ivy-index 0)) #("/Users/durand/.emacs.d/sans titre.txt" 0 37 (ivy-index 0)) #("/Users/durand/org/agenda.org" 0 28 (ivy-index 0)) #("/Users/durand/Desktop/Centre/TeX/deuxièm texte.tex" 0 50 (ivy-index 2)) #("/Users/durand/.emacs.d/elpa/expand-region-20180817.1134/expand-region-core.el" 0 77 (ivy-index 0)) #("/Users/durand/elisp_packages/" 0 29 (ivy-index 0)) #("/Users/durand/elisp_packages/durand-keys/" 0 41 (ivy-index 0)) #("/Users/durand/.emacs.d/my_packages/durand-keys/durand-keys.el" 0 61 (ivy-index 0)) #("/Users/durand/elisp_packages/durand-keys/durand-keys.el" 0 55 (ivy-index 0)) #("/Users/durand/elisp_packages/durand-keys" 0 40 (ivy-index 0)) #("/Users/durand/.emacs.d/init.el" 0 30 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/src/xml.c" 0 39 (ivy-index 0)) #("/Users/durand/w.emacs.d/emacs/INSTALL.REPO" 0 42 (ivy-index 1)) #("/Users/durand/Downloads/documents intéressants/Cohomologie/" 0 59 (ivy-index 0)) "~/.emacs.d/custom.el" #("/Users/durand/Downloads/dix exposés sur la cohomologie des schémas.pdf" 0 70 (ivy-index 0)) #("/Users/durand/elisp_packages/ideal/ideal.el" 0 43 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/lispy-20181210.1751/lispy-autoloads.el" 0 66 (ivy-index 16)) #("/Users/durand/.emacs.d/elpa/lispy-20181210.1751/lispy.elc" 0 57 (ivy-index 24)) #("/Users/durand/Downloads/documents intéressants/Catégories/categories for the working mathematician.pdf" 0 102 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Catégories/categories for the wording mathematician.pdf" 0 102 (ivy-index 0)) #("/Users/durand/Downloads/Notes on Commutation of Limits and Colimits.pdf" 0 71 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Théorie de nombres/Systèmes d'Euler/" 0 83 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Théorie de nombres/Systèmes d'Euler" 0 82 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/" 0 47 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/AG/" 0 50 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/divers/" 0 54 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/divers" 0 53 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Théorie de nombres/théorie des corps de classes/Local class field theory via Lubin-Tate theory.pdf" 0 145 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Théorie de nombres/théorie des corps de classes/Iwasawa - Local Class Field Theory.pdf" 0 133 (ivy-index 0)) #("/Users/durand/Downloads/documents intéressants/Théorie de nombres/théorie des corps de classes/" 0 95 (ivy-index 0)) #("/Users/durand/org/diary" 0 23 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/hydra-20181128.1716/hydra.el" 0 56 (ivy-index 7)) #("/Users/durand/.emacs.d/elpa/keychord/keychord.el" 0 48 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/keychord" 0 36 (ivy-index 0)) #("/Users/durand/.emacs.d/elpa/" 0 28 (ivy-index 0)) #("/Users/durand/Desktop/Capture d’écran 2019-01-30 à 11.25.31.png" 0 63 (ivy-index 3)) #("/Users/durand/Desktop/Capture d’écran 2019-01-30 à 11.25.17.png" 0 63 (ivy-index 5))))
(setq swiper-history '(#("header" 0 6 (ivy-index 0)) #("projec" 0 6 (ivy-index 1)) #("hl" 0 2 (ivy-index 0)) #("gab" 0 3 (ivy-index 0)) "des" #("durand-bookmark-jump-headlong" 0 29 (ivy-index 2)) #("general kil" 0 11 (ivy-index 0)) #("gene kill" 0 9 (ivy-index 0)) #("char or bracket" 0 15 (ivy-index 3)) #("\"t\"" 0 3 (ivy-index 0)) #("s-t" 0 3 (ivy-index 0)) "s-t\"" #("pdf mode" 0 8 (ivy-index 2)) #("downloads" 0 9 (ivy-index 0)) #("pdf dir" 0 7 (ivy-index 0)) #("chercher pdf" 0 12 (ivy-index 3)) #("hand" 0 4 (ivy-index 0)) #("mu4e" 0 4 (ivy-index 1)) #("durand-general-save" 0 19 (ivy-index 0)) #("durand-buffer-scroll" 0 20 (ivy-index 0)) #("def beginnin" 0 12 (ivy-index 0)) #("ret t\"" 0 6 (ivy-index 0)) #("compan" 0 6 (ivy-index 0)) "/" "\"/" #("org link" 0 8 (ivy-index 14)) #("durand beginning" 0 16 (ivy-index 0)) #("durand begin" 0 12 (ivy-index 0)) #("durand-beginning-of-line-or-block" 0 33 (ivy-index 0)) #("\"p\"" 0 3 (ivy-index 3)) #("leur" 0 4 (ivy-index 0)) #("make blank" 0 10 (ivy-index 4)) "switcher" #("vice" 0 4 (ivy-index 3)) "or vice" #("gene save" 0 9 (ivy-index 0)) #("gene sa" 0 7 (ivy-index 0)) #("leur " 0 5 (ivy-index 0)) #("update" 0 6 (ivy-index 9)) "\"(\"" #("\"spc m" 0 6 (ivy-index 4)) #("bookmark" 0 8 (ivy-index 1)) #("fra" 0 3 (ivy-index 1)) #("fr" 0 2 (ivy-index 1)) "ivy immedia" #("jump hook" 0 9 (ivy-index 0)) "f9 tex" #("jump" 0 4 (ivy-index 5)) "spc j" "durand-cycle-cases" #("\"u\"" 0 3 (ivy-index 1)) #("genera kill" 0 11 (ivy-index 0)) #("DEFUN" 0 5 (ivy-index 0)) "emacs_version" #("Lisp_Object" 0 11 (ivy-index 0)) #("move_point" 0 10 (ivy-index 0)) #("make-pro" 0 8 (ivy-index 0)) "make" #("\"ret \"" 0 6 (ivy-index 15)) #("open line" 0 9 (ivy-index 1)) #("ret c\"" 0 6 (ivy-index 0)) #("general kill" 0 12 (ivy-index 0)) #("durand-general-kill" 0 19 (ivy-index 0)) #("\"d\"" 0 3 (ivy-index 0)) #("org-open-bookmarks" 0 18 (ivy-index 0)) #("open book" 0 9 (ivy-index 1)) "update link" #("update " 0 7 (ivy-index 20)) #("org-agenda-open-novels" 0 22 (ivy-index 1)) #("agenda mode map" 0 15 (ivy-index 9)) #("org ql" 0 6 (ivy-index 2)) #("query" 0 5 (ivy-index 0)) #("super agenda group" 0 18 (ivy-index 10)) "super group" #("capture tem" 0 11 (ivy-index 0)) "capture" #("spc k\"" 0 6 (ivy-index 0)) #("esc" 0 3 (ivy-index 1)) #("home" 0 4 (ivy-index 0)) #("key chord" 0 9 (ivy-index 1)) #("durand-next-window-or-frame" 0 27 (ivy-index 1)) #("next window" 0 11 (ivy-index 0)) #("; window" 0 8 (ivy-index 0)) #("other window" 0 12 (ivy-index 6)) #("\"<\"" 0 3 (ivy-index 0)) #("\"f" 0 2 (ivy-index 3)) #("rec tly files" 0 13 (ivy-index 3)) #("ly-clo" 0 6 (ivy-index 2)) #("kill" 0 4 (ivy-index 6)) "general move" #("begin" 0 5 (ivy-index 0)) #("gene kil" 0 8 (ivy-index 0)) "or bracket" "SPC e\"" "SPC t" #("SPC R" 0 5 (ivy-index 1)) #("move bra" 0 8 (ivy-index 2)) #("ret" 0 3 (ivy-index 9)) #("\"=\"" 0 3 (ivy-index 0))))
(setq ivy-history '(#("user-em" 0 7 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("^f" 0 2 (ivy-index 0)) #("^top" 0 4 (ivy-index 0)) #("^i" 0 2 (ivy-index 0)) #("=" 0 1 (ivy-index 0)) "(defun durand-self-insert-complete-and-exit ()
  \"Taken from headlong file.
Insert the character you type and try to complete.
If this results in one candidate, then immediately exit the minibuffer with the default action.\"
  (interactive)
  (when durand-headlong
    (let ((candidates-length (safe-length (ivy--filter ivy-text (ivy-state-collection ivy-last))))
	  (cur-action (cadadr (ivy-state-action ivy-last))))
      (cond
       ((eq 1 candidates-length)
	(if durand-changed-p
	    (ivy-exit-with-action cur-action)
	  (setq durand-changed-p t)))
       (t (setq durand-changed-p t))))))" #("durand-bookmark-jump-headlong" 0 29 (fontified t)) #("*" 0 1 (ivy-index 0)) #("/" 0 1 (ivy-index 0)) #("-" 0 1 (ivy-index 0)) "(defun durand-general-kill (&optional direction unit no-kill-p)
  \"General function for killing.
In mu4e-headers-mode, execute `mu4e-headers-mark-for-delete'.
In org-agenda-mode, execute `org-agenda-kill'.
In dired-mode,execute `dired-do-delete'.
If the region is active, then delete or kill the region according to NO-KILL-P.
Otherwise, it behaves according to UNIT.
If UNIT is character, then it deletes or kills the character that follows or precedes the point.
If UNIT is word, then do the same for words.
If UNIT is end, DIRECTION is forward, and if lispy-mode is on, then execute `lispy-kill';
else deletes or kills to the end or the beginning of the visual line.
If UNIT is char-or-brackets, then delete or kill the entire bracket near point, if the cursor is near a bracket;
with current-prefix-arg, only deletes or kills the brackets;
if point not near a bracket, then delete or kill a character.\"
  (interactive)
  (pcase major-mode
    ('mu4e-headers-mode
     (mu4e-headers-mark-for-delete))
    ((guard (derived-mode-p 'org-agenda-mode))
     (org-agenda-kill))
    ((guard (derived-mode-p 'dired-mode))
     (dired-do-delete current-prefix-arg))
    ((guard (use-region-p))
     (if no-kill-p
         (delete-region (region-beginning) (region-end))
       (kill-region (region-beginning) (region-end) t)))
    (_
     (let* ((direction (or direction 'forward))
            (unit (or unit 'character))
            (direction-factor (pcase direction
                                ('forward 1)
                                ('backward -1)
                                (_ (user-error \"Unknown direction: %s\" direction))))
            (kill-function (if no-kill-p 'delete-region 'kill-region)))
       (pcase unit
         ('character
          (let* ((p1 (point))
                 (p2 (+ (point) direction-factor))
                 (beg (min p1 p2))
                 (end (max p1 p2)))
            (funcall kill-function beg end)))
         ('word
          (pcase direction
            ('forward
             (funcall kill-function (point) (progn (forward-word 1) (point))))
            ('backward
             (funcall kill-function (point) (progn (forward-word -1) (point))))))
         ('end
          (pcase direction
            ('forward
             (if (memq 'lispy-mode minor-mode-list)
                 (lispy-kill)
               (funcall kill-function (point) (max (1+ (point)) (save-excursion
                                                                  (end-of-visual-line)
                                                                  (point))))))
            ('backward
             (funcall kill-function
                      (min (1- (point)) (save-excursion (end-of-visual-line) (point)))
                      (point)))))
         ('char-or-bracket
          (pcase direction-factor
            (1 (cond
                ((or
                  (looking-at \"\\\\s(\")
                  (and (looking-at \"\\\\s\\\"\") (not (nth 3 (syntax-ppss)))))
                 (if (null current-prefix-arg)
                     (funcall kill-function (point) (save-excursion (forward-sexp 1) (point)))
                   (save-excursion
                     (forward-sexp 1)
                     (funcall kill-function (1- (point)) (point)))
                   (funcall kill-function (point) (1+ (point)))))
                ((looking-at \"\\\\s)\")
                 (if (null current-prefix-arg)
                     (progn
                       (forward-char 1)
                       (funcall kill-function
                                (save-excursion (backward-sexp 1)
                                                (point))
                                (point)))
                   (save-excursion
                     (forward-char 1)
                     (backward-sexp 1)
                     (funcall kill-function (point) (1+ (point))))
                   (funcall kill-function (point) (1+ (point)))))
                (t
                 (durand-general-kill 'forward 'character no-kill-p))))
            (-1 (cond
                 ((or
                   (looking-back \"\\\\s)\" 1)
                   (and (looking-back \"\\\\s\\\"\" 1) (not (nth 3 (syntax-ppss)))))
                  (if (null current-prefix-arg)
                      (funcall kill-function (save-excursion (forward-sexp -1) (point)) (point))
                    (save-excursion
                      (forward-sexp -1)
                      (funcall kill-function (point) (1+ (point))))
                    (funcall kill-function (1- (point)) (point))))
                 ((looking-back \"\\\\s(\" 1)
                  (if (null current-prefix-arg)
                      (progn
                        (forward-char -1)
                        (funcall kill-function
                                 (point)
                                 (save-excursion (forward-sexp 1) (point))))
                    (save-excursion
                      (forward-char -1)
                      (forward-sexp 1)
                      (funcall kill-function (1- (point)) (point)))
                    (funcall kill-function (1- (point)) (point))))
                 (t
                  (durand-general-kill 'backward 'character no-kill-p))))))
         (_
          (user-error \"Killing for %s not implemented yet\" unit)))))))" "(defun durand-general-kill (&optional direction unit no-kill-p)
  \"General function for killing; prefer deleting region.\"
  (interactive)
  (pcase major-mode
    ('mu4e-headers-mode
     (mu4e-headers-mark-for-delete))
    ((guard (derived-mode-p 'org-agenda-mode))
     (org-agenda-kill))
    ((guard (derived-mode-p 'dired-mode))
     (dired-do-delete current-prefix-arg))
    ((guard (use-region-p))
     (if no-kill-p
         (delete-region (region-beginning) (region-end))
       (kill-region (region-beginning) (region-end) t)))
    (_
     (let* ((direction (or direction 'forward))
            (unit (or unit 'character))
            (direction-factor (pcase direction
                                ('forward 1)
                                ('backward -1)
                                (_ (user-error \"Unknown direction: %s\" direction))))
            (kill-function (if no-kill-p 'delete-region 'kill-region)))
       (pcase unit
         ('character
          (let* ((p1 (point))
                 (p2 (+ (point) direction-factor))
                 (beg (min p1 p2))
                 (end (max p1 p2)))
            (funcall kill-function beg end)))
         ('word
          (pcase direction
            ('forward
             (funcall kill-function (point) (progn (forward-word 1) (point))))
            ('backward
             (funcall kill-function (point) (progn (forward-word -1) (point))))))
         ('end
          (pcase direction
            ('forward
             (if (memq 'lispy-mode minor-mode-list)
                 (lispy-kill)
               (funcall kill-function (point) (max (1+ (point)) (line-end-position)))))
            ('backward
             (funcall kill-function (min (1- (point)) (line-beginning-position)) (point)))))
         ('char-or-bracket
          (pcase direction-factor
            (1 (cond
                ((or
                  (looking-at \"\\\\s(\")
                  (and (looking-at \"\\\\s\\\"\") (not (nth 3 (syntax-ppss)))))
                 (if (null current-prefix-arg)
                     (funcall kill-function (point) (save-excursion (forward-sexp 1) (point)))
                   (save-excursion
                     (forward-sexp 1)
                     (funcall kill-function (1- (point)) (point)))
                   (funcall kill-function (point) (1+ (point)))))
                ((looking-at \"\\\\s)\")
                 (if (null current-prefix-arg)
                     (progn
                       (forward-char 1)
                       (funcall kill-function
                                (save-excursion (backward-sexp 1)
                                                (point))
                                (point)))
                   (save-excursion
                     (forward-char 1)
                     (backward-sexp 1)
                     (funcall kill-function (point) (1+ (point))))
                   (funcall kill-function (point) (1+ (point)))))
                (t
                 (durand-general-kill 'forward 'character no-kill-p))))
            (-1 (cond
                 ((or
                   (looking-back \"\\\\s)\" 1)
                   (and (looking-back \"\\\\s\\\"\" 1) (not (nth 3 (syntax-ppss)))))
                  (if (null current-prefix-arg)
                      (funcall kill-function (save-excursion (forward-sexp -1) (point)) (point))
                    (save-excursion
                      (forward-sexp -1)
                      (funcall kill-function (point) (1+ (point))))
                    (funcall kill-function (1- (point)) (point))))
                 ((looking-back \"\\\\s(\" 1)
                  (if (null current-prefix-arg)
                      (progn
                        (forward-char -1)
                        (funcall kill-function
                                 (point)
                                 (save-excursion (forward-sexp 1) (point))))
                    (save-excursion
                      (forward-char -1)
                      (forward-sexp 1)
                      (funcall kill-function (1- (point)) (point)))
                    (funcall kill-function (1- (point)) (point))))
                 (t
                  (durand-general-kill 'backward 'character no-kill-p))))))
         (_
          (user-error \"Killing for %s not implemented yet\" unit)))))))" #("^e" 0 2 (ivy-index 0)) #("最新章" 0 3 (ivy-index 1)) "*Help*" "*chercher pdf*" "*eshell*" "custom.el" #("org-mime" 0 8 (ivy-index 1)) "(defun durand-buffer-scroll (&optional direction n other-p)
  \"Scroll buffer\"
  (let* ((direction (or direction 'up))
         (scroll-function (pcase direction
                            ('up '(
                                   :normal scroll-up
                                   :other-window scroll-other-window
                                   :pdf pdf-view-scroll-up-or-next-page
                                   :agenda org-agenda-next-block))
                            ('down '(
                                     :normal scroll-down
                                     :other-window scroll-other-window-down
                                     :pdf pdf-view-scroll-down-or-previous-page
                                     :agenda org-agenda-previous-block))
                            (_ (user-error \"Invalid direction %s\" direction)))))
    (condition-case err
        (cond
         (other-p
          (funcall (plist-get scroll-function :other-window) n))
         ((string= major-mode \"pdf-view-mode\")
          (funcall (plist-get scroll-function :pdf) n))
         ((string= major-mode \"org-agenda-mode\")
          (funcall (plist-get scroll-function :agenda) n))
         (t
          (funcall (plist-get scroll-function :normal) n)))
      ((user-error error) (pcase (cdr err)
                            ((pred null)
                             (message \"%s\" (car err)))
                            (_
                             (message \"%s: %s\" (car err) (cdr err))))))
    (general-hydra/body)))" #("^h" 0 2 (ivy-index 0)) #("with-current-" 0 13 (ivy-index 1)) "mpv --no-terminal --autofit=100%x100% --no-border --geometry=+0+-24 $*" #("tex-dis" 0 7 (ivy-index 1)) #("^sc" 0 3 (ivy-index 0)) "()" #("^a" 0 2 (ivy-index 0)) #("français" 0 8 (ivy-index 1)) #("org-archive-" 0 12 (ivy-index 0)) "frdic" "cambridge dictionnaire" #("indent-acc" 0 10 (ivy-index 0)) #("dired-dodel" 0 11 (ivy-index 0)) #("dired-flag" 0 10 (ivy-index 2)) "cambridge dictionnaire" "conjugaison" "cambridge dictionnaire" "reverso dictionnaire" #("no" 0 2 (ivy-index 0)) "cambridge dictionnaire" #("org-make-link" 0 13 (ivy-index 0)) "frdic" #("org-element-pro" 0 15 (ivy-index 0)) "notes.org" "(plist-get element :raw-value)" "(tags \"mots\")" #("user-emacs-di" 0 13 (ivy-index 0)) #("^n" 0 2 (ivy-index 0)) #("n" 0 1 (ivy-index 0)) #("*s" 0 2 (ivy-index 0)) #("^*s" 0 3 (ivy-index 0)) #("xwibrow" 0 7 (ivy-index 0)) #("browse-urlbrf" 0 13 (ivy-index 0)) #("evalre" 0 6 (ivy-index 1)) #("minor" 0 5 (ivy-index 0)) #("durand-next-window-or-frame" 0 27 (fontified t)) #("global-comm" 0 11 (ivy-index 0)) "*Messages*" #("^x" 0 2 (ivy-index 0)) #("(" 0 1 (ivy-index 0)) "(setf durand-recently-closed-files
          (reverse
           (remove-duplicates
            (reverse
             (push (buffer-file-name) durand-recently-closed-files))
            :test (lambda (x y) (string= x y)))))" #("setf " 0 5 (ivy-index 0)) "sans titre<1>" #("durand-recen" 0 12 (ivy-index 0)) #("mes" 0 3 (ivy-index 0)) #("durand-re" 0 9 (ivy-index 1)) #("assode" 0 6 (ivy-index 0)) #("buffer-mo" 0 9 (ivy-index 0)) #(" *LV*" 0 5 (ivy-index 0)) "((and arg (equal arg '(4)))
       (if (not (re-search-backward regex nil 'go))
           (goto-char (point-min))
         (goto-char (match-beginning 0))))" "maybe-multiple-cursors-mode" #("mc/mode" 0 7 (ivy-index 2)) #("\"" 0 1 (ivy-index 0)) "\\n[\\t\\n ]*\\n+" "\\n\\f" #("re-search-back" 0 14 (ivy-index 0)) #("regex" 0 5 (ivy-index 2)) #("elisp" 0 5 (ivy-index 0)) #("re-search-for" 0 13 (ivy-index 0)) #("cl" 0 2 (ivy-index 0)) #("compose" 0 7 (ivy-index 0)) "(switch-to-buffer (other-buffer))" #("inte" 0 4 (ivy-index 0)) "magit: .emacs.d" "(with-current-buffer name
        (derived-mode-p 'magit-mode))" #("^c" 0 2 (ivy-index 0)) "durand-next-real-buffer" #("skip-chars-" 0 11 (ivy-index 0)) #("re-search-bac" 0 13 (ivy-index 0)) #("desfun" 0 6 (ivy-index 1)) #("<" 0 1 (ivy-index 0)) "durand-change-pair" #("minor-mode" 0 10 (ivy-index 0)) #("sortre" 0 6 (ivy-index 0)) #("cl-pre" 0 6 (ivy-index 0)) #("^d" 0 2 (ivy-index 0)) #("^s" 0 2 (ivy-index 0)) #("m" 0 1 (ivy-index 0)) #("^t" 0 2 (ivy-index 0))))
(setq extended-command-history '(#("rain" 0 4 (ivy-index 0)) "durand-chercher-pdf" #("auto" 0 4 (ivy-index 3)) "durand-chercher-pdf" "emacs-lisp-mode" "fundamental-mode" #("emacsli" 0 7 (ivy-index 0)) "fundamental-mode" #("duchpdf" 0 7 (ivy-index 0)) "describe-function" #("describefun" 0 11 (ivy-index 0)) #("evalex" 0 6 (ivy-index 0)) "describe-function" #("descrfun" 0 8 (ivy-index 0)) #("sort" 0 4 (ivy-index 0)) "fundamental-mode" #("evalregion" 0 10 (ivy-index 0)) "durand-copy-line-or-region" #("duclo" 0 5 (ivy-index 0)) "align-regexp" #("align" 0 5 (ivy-index 1)) #("macro" 0 5 (ivy-index 1)) #("emlimode" 0 8 (ivy-index 0)) "org-mode" #("orgmode" 0 7 (ivy-index 0)) "eval-expression" #("oliv" 0 4 (ivy-index 0)) #("kiem" 0 4 (ivy-index 0)) #("packlis" 0 7 (ivy-index 0)) #("packin" 0 6 (ivy-index 0)) "durand-chercher-pdf" "fundamental-mode" "kill-emacs" #("killemacs" 0 9 (ivy-index 0)) "name-last-kbd-macro" "edit-kbd-macro" "test" "edit-kbd-macro" "name-last-kbd-macro" #("kbdmacro" 0 8 (ivy-index 10)) "edit-kbd-macro" "name-last-kbd-macro" "edit-kbd-macro" #("name" 0 4 (ivy-index 0)) "durand-chercher-pdf" #("test" 0 4 (ivy-index 0)) "emacs-lisp-mode" #("durand-chercher-" 0 16 (ivy-index 0)) "test/body" #("testbo" 0 6 (ivy-index 0)) "macrostep-expand" #("macroe" 0 6 (ivy-index 0)) #("elispmode" 0 9 (ivy-index 1)) "eval-expression" #("evalexp" 0 7 (ivy-index 0)) "durand-chercher-musique" "durand-sign" #("eww" 0 3 (ivy-index 0)) "durand-sign" #("cologmo" 0 7 (ivy-index 1)) #("commandlog" 0 10 (ivy-index 0)) "durand-sign" "durand-chercher-pdf" "durand-sign" "durand-chercher-musique" "durand-sign" "olivetti-mode" #("lispin" 0 6 (ivy-index 2)) "durand-sign" "durand-chercher-musique" "durand-chercher-pdf" "durand-chercher-musique" "olivetti-mode" #("plain" 0 5 (ivy-index 0)) #("olive" 0 5 (ivy-index 0)) "durand-chercher-musique" #("ptt" 0 3 (ivy-index 0)) "durand-chercher-musique" "durand-chercher-pdf" "fundamental-mode" #("fun" 0 3 (ivy-index 0)) #("pdfvimo" 0 7 (ivy-index 0)) "durand-chercher-musique" "describe-face" #("deface" 0 6 (ivy-index 0)) "durand-sign" "durand-chercher-musique" #("packdelete" 0 10 (ivy-index 0)) #("gnugo" 0 5 (ivy-index 0)) "durand-chercher-musique" #("durandmusi" 0 10 (ivy-index 14)) "durand-chercher-musique" "durand-sign" "durand-chercher-pdf" "org-mode" "eval-expression" "plain-tex-mode" "durand-sign" "durand-chercher-pdf" "durand-sign"))
(setq counsel-describe-symbol-history '(#("^dugek" 0 6 (ivy-index 0)) #("^dushoc" 0 7 (ivy-index 0)) #("^fortistr" 0 9 (ivy-index 0)) #("^withtempbuw" 0 12 (ivy-index 0)) #("^dufol" 0 6 (ivy-index 0)) #("^fort" 0 5 (ivy-index 0)) #("jumptono" 0 8 (ivy-index 0)) #("^duchpdf" 0 8 (ivy-index 0)) #("pdfdir" 0 6 (ivy-index 0)) #("^" 0 1 (ivy-index 31362)) #("^companyda" 0 10 (ivy-index 0)) #("^ghhe" 0 5 (ivy-index 0)) #("^withbuffer" 0 11 (ivy-index 4)) #("^descri" 0 7 (ivy-index 0)) #("^remove" 0 7 (ivy-index 0)) #("^orgfap" 0 7 (ivy-index 0)) #("^orglink" 0 8 (ivy-index 1)) #("^mblank" 0 7 (ivy-index 0)) #("^tgov" 0 5 (ivy-index 0)) #("^toubn" 0 6 (ivy-index 0)) #("^ghyhe" 0 6 (ivy-index 0)) #("^aufi" 0 5 (ivy-index 0)) #("^ivyimme" 0 8 (ivy-index 0)) #("^dutea" 0 6 (ivy-index 0)) #("^counwo" 0 7 (ivy-index 0)) #("^servif" 0 7 (ivy-index 0)) #("^gehyhe" 0 7 (ivy-index 0)) #("^defalias" 0 9 (ivy-index 0)) #("^messa" 0 6 (ivy-index 0)) #("^put" 0 4 (ivy-index 0)) #("^defun" 0 6 (ivy-index 0)) #("^fochar" 0 7 (ivy-index 0)) #("^orgcaptu" 0 9 (ivy-index 0)) #("^indentmode" 0 11 (ivy-index 1)) #("^difldele" 0 9 (ivy-index 0)) #("^gehy" 0 5 (ivy-index 1)) #("^orgopenlink" 0 12 (ivy-index 4)) #("^assoc*" 0 7 (ivy-index 0)) #("^assdef" 0 7 (ivy-index 0)) #("^substring" 0 10 (ivy-index 0)) #("^organylinkre" 0 13 (ivy-index 0)) #("^stringma" 0 9 (ivy-index 0)) #("^orgoffer" 0 9 (ivy-index 1)) #("^orgql" 0 6 (ivy-index 4)) #("^xw" 0 3 (ivy-index 0)) #("^browfun" 0 8 (ivy-index 2)) #("^evallas" 0 8 (ivy-index 0)) #("^unwinp" 0 7 (ivy-index 0)) #("^setcdr" 0 7 (ivy-index 0)) #("^truncate" 0 9 (ivy-index 2)) #("^lispykill" 0 10 (ivy-index 0)) #("^mem" 0 4 (ivy-index 20)) #("^memq" 0 5 (ivy-index 1)) #("^gehyduk" 0 8 (ivy-index 0)) #("^durely" 0 7 (ivy-index 0)) #("^revse" 0 6 (ivy-index 2)) #("^removdu" 0 8 (ivy-index 0)) #("^bufferfil" 0 10 (ivy-index 0)) #("^mu4eviqui" 0 10 (ivy-index 0)) #("^mu4emek" 0 8 (ivy-index 0)) #("^mu4eheaqui" 0 11 (ivy-index 0)) #("^mu4ecom" 0 8 (ivy-index 1)) #("^member" 0 7 (ivy-index 0)) #("^intcomb" 0 8 (ivy-index 0)) #("^getbu" 0 6 (ivy-index 0)) #("^bufferlivep" 0 12 (ivy-index 0)) #("^elfeedmode" 0 11 (ivy-index 1)) #("^mu4emode" 0 9 (ivy-index 8)) #("^magit" 0 6 (ivy-index 21)) #("^magitmode" 0 10 (ivy-index 0)) #("^durandbuffer" 0 13 (ivy-index 4)) #("^nextb" 0 6 (ivy-index 0)) #("^pushmark" 0 9 (ivy-index 0)) #("^markpar" 0 8 (ivy-index 0)) #("^markpara" 0 9 (ivy-index 0)) #("^beginli" 0 8 (ivy-index 0)) #("^count" 0 6 (ivy-index 2)) #("count" 0 5 (ivy-index 2)) #("^recentopbom" 0 12 (ivy-index 0)) #("^retopb" 0 7 (ivy-index 0)) #("^helpm" 0 6 (ivy-index 0)) #("cyclecases" 0 10 (ivy-index 0)) #("cycle" 0 5 (ivy-index 2)) #("undo-tree-enable-undo-in-region" 0 31 (ivy-index 0)) #("^undore" 0 7 (ivy-index 4)) #("^sorline" 0 8 (ivy-index 0)) #("^sort-" 0 6 (ivy-index 3)) #("pretprint" 0 9 (ivy-index 6)) #("^gehyheads" 0 10 (ivy-index 0)) #("^conditioncase" 0 14 (ivy-index 0)) #("^pdfv" 0 5 (ivy-index 0)) #("^forline" 0 8 (ivy-index 0)) #("^nextline" 0 9 (ivy-index 0)) #("saveadvi" 0 8 (ivy-index 0)) #("^lamode" 0 7 (ivy-index 0)) #("^plainte" 0 8 (ivy-index 1)) #("^dukibu" 0 7 (ivy-index 0)) #("^durangenk" 0 10 (ivy-index 0)) #("^dabex" 0 6 (ivy-index 0))))
(setq tablist-named-filter 'nil)
(setq org-drill-sm5-optimal-factor-matrix '((4 (2.8000000000000003 . 2.794)) (3 (2.8000000000000003 . 2.785) (2.7 . 2.691)) (2 (2.46 . 2.443) (2.5 . 2.5) (2.7 . 2.679) (2.6 . 2.588)) (1 (2.36 . 3.86) (1.96 . 3.58) (2.1799999999999997 . 3.72) (2.5 . 4.0) (2.6 . 4.14) (1.7000000000000002 . 3.44))))
